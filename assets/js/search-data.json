{
  
    
        "post0": {
            "title": "Quiz Stored in dictionary",
            "content": "question_and_answer = [] question_and_answer.append({ &quot;Question&quot;: &quot;What is the shape of the earth?&quot;, &quot;Answer&quot;: &quot;sphere&quot; }) question_and_answer.append({ &quot;Question&quot;: &quot;What is the innermost layer of earth?&quot;, &quot;Answer&quot;: &quot;core&quot; }) question_and_answer.append({ &quot;Question&quot;: &quot;Is global warming bad?&quot;, &quot;Answer&quot;: &quot;yes&quot; }) totalquestions = len(question_and_answer) print(&quot;This is a quiz with a total of &quot; + str(totalquestions) + &quot; questions.&quot;) score = 0 for record in question_and_answer: msg = input(record[&quot;Question&quot;]) if (msg == record[&quot;Answer&quot;]): print (&quot;You are correct!&quot;) score = score + 1 else: print (&quot;Wrong. The correct answer is: &quot; + record[&quot;Answer&quot;]) print(&quot;Your total score is:&quot; + str(score) + &quot; out of &quot; + str(totalquestions)) . This is a quiz with a total of 3 questions. You are correct! Wrong. The correct answer is: core Wrong. The correct answer is: yes Your total score is:1 out of 3 .",
            "url": "https://jiya-sav.github.io/jiya_repository/week%202/2022/10/20/week2_ListQuiz.html",
            "relUrl": "/week%202/2022/10/20/week2_ListQuiz.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Jiya's Quizzes",
            "content": "Below are the required questions about AP CSP vocab . import getpass, sys def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) question_and_answer(&quot;Name the Python output command mentioned in this lesson?&quot;) question_and_answer(&quot;If you see many lines of code in order, what would College Board call it?&quot;) question_and_answer(&quot;Describe a keyword used in Python to define a function?&quot;) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Question: Name the Python output command mentioned in this lesson? Answer: rsp Question: If you see many lines of code in order, what would College Board call it? Answer: text Question: Describe a keyword used in Python to define a function? Answer: def Hello, jiya_sav running /bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Answer: no Question: What command is used to include other functions that were previously developed? if is incorrect! Question: What command is used to evaluate correct or incorrect response in this example? then is incorrect! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! jiya_sav you scored 1/3 . Below are questions about my fastpages site . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions about my blog.&quot;) question_and_answer(&quot;Are you ready?&quot;) rsp = question_with_response(&quot;Are sunflowers included in the flowers post?&quot;) if rsp == &quot;yes&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;In the sample AP Physics lab post, what is the calculated density?&quot;) if rsp == &quot;0.815&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What instrument do I like to play?&quot;) if rsp == &quot;piano&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, jiya_sav running /bin/python3 You will be asked 3 questions about my blog. Question: Are you ready? Answer: no Question: Are sunflowers included in the flowers post? yes is correct! Question: In the sample AP Physics lab post, what is the calculated density? 0.18 is incorrect! Question: What instrument do I like to play? piano is correct! jiya_sav you scored 2/3 .",
            "url": "https://jiya-sav.github.io/jiya_repository/fastpages/jupyter/week%201/2022/10/20/myquiz.html",
            "relUrl": "/fastpages/jupyter/week%201/2022/10/20/myquiz.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Jiya's Custom Lists, Dictionaries, Iteration",
            "content": "Fav_Fruit_Dictionary = [] Fav_Fruit_Dictionary.append({ &quot;FirstName&quot;: &quot;Arya&quot;, &quot;Fav_Fruits&quot;: [&quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;, &quot;Jackfruit&quot;, &quot;Watermelon&quot;] }) Fav_Fruit_Dictionary.append({ &quot;FirstName&quot;: &quot;Jiya&quot;, &quot;Fav_Fruits&quot;: [&quot;Orange&quot;, &quot;Lemon&quot;] }) # add one more entry based on input from user # ask user first name of friend and friend&#39;s fav fruits friend_name = input(&quot;What is your friend&#39;s first name?&quot;) friend_fruit_count = int(input(&quot;How many favorite fruits does &quot; + friend_name + &quot; have?&quot;)) # make temporary list to hold fruit values from input fruit_dictionary = [] for i in range(0, friend_fruit_count): fruit = str(input(&quot;What is your friend&#39;s favorite fruit # &quot; + str(i + 1) + &quot;:&quot;)) fruit_dictionary.append(fruit) # now we will append the friend&#39;s name and fruit list to the main dictionary Fav_Fruit_Dictionary.append ({ &quot;FirstName&quot;: friend_name, &quot;Fav_Fruits&quot;: fruit_dictionary }) # The list is printed def print_data(printfruit): print(printfruit[&quot;FirstName&quot;] + &quot;&#39;s &quot; + &quot;favorite fruits are &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(printfruit[&quot;Fav_Fruits&quot;])) print() def for_loop(): print(&quot;For loop output n&quot;) for record in Fav_Fruit_Dictionary: print_data(record) for_loop() . For loop output Arya&#39;s favorite fruits are Orange, Apple, Mango, Jackfruit, Watermelon Jiya&#39;s favorite fruits are Orange, Lemon piyush&#39;s favorite fruits are mango, pineapple . There are other methods besides append that can be used on lists. Below, I have demonstrated how to reverse the order and remove items. . print(&quot;Printing the same dictionary in reverse order:&quot;) for record in reversed(Fav_Fruit_Dictionary): print_data(record) # Removing the second record in the dictionary print(&quot;Printing the same list, with Jiya&#39;s record removed:&quot;) del Fav_Fruit_Dictionary[1] for record in Fav_Fruit_Dictionary: print_data(record) . Printing the same dictionary in reverse order: piyush&#39;s favorite fruits are mango, pineapple Jiya&#39;s favorite fruits are Orange, Lemon Arya&#39;s favorite fruits are Orange, Apple, Mango, Jackfruit, Watermelon Printing the same list, with Jiya&#39;s record removed: Arya&#39;s favorite fruits are Orange, Apple, Mango, Jackfruit, Watermelon piyush&#39;s favorite fruits are mango, pineapple . Now, I explore other type of loops, like while . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(Fav_Fruit_Dictionary): record = Fav_Fruit_Dictionary[i] print_data(record) i += 1 return while_loop() . While loop output Arya&#39;s favorite fruits are Orange, Apple, Mango, Jackfruit, Watermelon piyush&#39;s favorite fruits are mango, pineapple .",
            "url": "https://jiya-sav.github.io/jiya_repository/week%202/2022/10/20/myPythonLists.html",
            "relUrl": "/week%202/2022/10/20/myPythonLists.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Planning Out My Applab (1)",
            "content": "Plan for quiz: . Home screen will contain 2 choices; one is for a quiz and the other is a drawing game . | Blue Quiz . | Red Quiz . | . Score: variable score created . Blue Quiz: 2 vacation paths; only right way is valid and left way doesn’t work . | Mexico path takes to first question: Which flag is Mexico’s flag? . If wrong options are clicked, then taken to a screen showing answer . | If correct answer is chosen, then taken to a screen saying “correct,” and 1 point is added to variable score . | Button taking to next question is present, on both result screens . | | Question 2: What is the capital of Mexico? . If wrong options are clicked, then taken to a screen showing answer . | If correct answer is chosen, then taken to a screen saying “correct,” and 1 point is added to variable score . | Button taking to next question is present, on both result screens . | | Question 3: What year was the Mexican revolution? (1910) . If wrong options are clicked, then taken to a screen showing answer . | If correct answer is chosen, then taken to a screen saying “correct,” and 1 point is added to variable score . | Button taking to next question is present, on both result screens . | | Final screen shows score out of 3 . | | Red Quiz: exploring with neo and trinity . | Taken to a page with drawing game: . Set 2 sliders; one for y and one for x position . | Use get command to show turtle where sliders are, based on what user puts x and y as . | Change pen color based on button clicked . | Ask for pen size in a prompt . | | College Board Standards: . Rubric Explanation . Program Purpose and Function | Inputs: user inputs which answer they want for blue choice path, and inputs x/ y value, color, and size of turtle when drawing . | Purpose: to create a quiz and drawing game that users can play with . | Outputs: score and drawing . | . | . Managing Complexity | No lists used . If loops are used to set the pen size in red answer choice path . | . | . Procedural Abstraction | Shown on planning doc . | All choices/ response plans are mapped out on this docx file (above) . | . | . Algorithm Implementation | This platform did not allow for algorithm implementation, so on event blocks were used repeatedly . | . | . Testing | Console method outputs were used for debugging purposes and to see where any code went wrong if there were problems . | . | . Data Abstraction | I stored a variable for score, and added 1 every time user got the correct answer . | There were also variable for x and y position in the drawing game, which were determined by user . | . | .",
            "url": "https://jiya-sav.github.io/jiya_repository/2022/10/20/Planning-Out-My-AppLab-(1).html",
            "relUrl": "/2022/10/20/Planning-Out-My-AppLab-(1).html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Ap Physics Lab Example",
            "content": "Lab 1: Measurements and Graphical Analysis . Purpose Statement: Given “disks” of different radii, determine the relationship between the mass and radius of the disks through graphical method. In using graphical method, we will learn about linearization and the use of it to create a mathematical model. . Outline of Procedure: . Foil disks of differing sizes are collected. . | The radius of each disk is measured in cm, and multiplied by itself to calculate r2. . | A disk is chosen at random, and folded in half 4 times. The thickness of the folded disk is measured, then divided by 16 to produce the actual thickness of the original disk (unfolded). Each disk has been cut from the same foil sheet, hence the thickness of disks are uniform. . | Each disk is weighed on a scale, and mass is recorded in a data table. . | What is the precision of the meterstick I used? Explain how you know this based on the data I provided. . The precision of the meterstick is to the tenth of a centimeter, in terms of measurement. When my group measured the actual disks, we went one significant figure beyond the shown measurement. . Data Table: . Cylinder Height (cm), Mass (g), and Calculated Radius2 (cm2) Values . . Graphs: . . m = 0.016r^2 - 0.036 . . m = 0.013r^2 + 0.024r - 0.090 . Analysis Questions: . What is the independent variable in your y = mx +b formula? . | The independent variable in our y = 0.016x - 0.036 is x, or radius2 (cm2). . What does the slope represent in your y = mx +b formula? Show dimensionally that indeed that is what your slope represents and that the formula is valid dimensionally. . | The slope is 0.016, which is grams / cm2. The slope is change in mass of cylinder over quantity of change in radius2. . . Should the “b” in your y = mx + b formula be zero? Explain your answer. . | No, the b should not be 0 due to data collection errors. In a perfect world, the line of best fit would go through the origin since if the radius is 0 cm, then radius2 is also 0 cm2, hence the mass would be 0 g. However, due to human error, the data values for radius and mass are not exact, hence the line of best fit that will best represent the data does not go through the origin. A line of best fit should represent all the data points best, not just the origin. . Measure/estimate the “thickness” of your cylinders. Use that value to find the experimental density of your cylinders. Find a percent difference between your found density and the actual density. The actual material is aluminum. . The estimated value for “thickness” is 0.00625 cm. The calculated value of density of the disk is 0.815 g/cm3 (calculations shown below). . | | . The calculated percent difference between actual density (2.7 g/cm3) and calculated density (0.815 g/cm3) is -93%. . | . errors. Make sure you explain why your number is bigger or smaller than (if positive or negative difference.) . Some of the aluminum disks had tiny holes or deficiencies, which likely means that mass measured is inaccurate. The thickness of each disk was extremely small, making it a difficult quantity to measure; hence, there are measurement inaccuracies present due to human error/ limitations. . | | Synthesis Questions: . In this experiment, if we had used disks with greater thickness, would the slope of your best fit line have been different? Would your experimental value for density be the same? Explain. . If the disks had a greater thickness, then the slope of the best fit line would be different. A greater thickness of the cylinders would result in a higher mass, even if the radius was the same. Hence, the slope of the line of the graph r2, on the x-axis, and mass in g, on the y-axis, would be greater (calculated by taking change in mass over change in r2). . | However, the density would not change. Once the slope of the best fit line is found, it is plugged into the equation slope = (pi)(thickness or height of cylinder)(density). Density is then solved for; the procedure has been demonstrated on analysis question 4. Since the thickness value plugged into this equation is also increased (along with slope), the density value would not be affected. Theoretically, the density value would not change anyway because the material, aluminum, remains the same no matter the thickness of the disk. . | | How would your graph of m vs r2 be different if you had used disks of the same thickness, but made out of steel? Draw a second line on your m vs r2 plot that represents disks made of steel. . A graph of m vs r2 for disks made out of steel would contain a steeper line of best fit, or one with a higher slope value, than one for disks made of aluminum. This is because disks made of aluminum have a lower density (2.7 g/cm3) than steel (7.85 g/cm3), and working backwards from the slope = (pi)(h of cylinder)(density) equation mentioned in above questions, increasing the density would increase the slope. Since only the density/ material of disks would change, each r2 value would remain the same, while mass would be higher for each steel disk. Hence, the estimated line of best fit for steel disks is steeper by about 7.85/ 2.7 times. . | | . Another group of students has acquired data for the exact same experiment; however, their . | disks are made of an unknown material that they are trying to determine. The group’s m versus . r2 data produced a line of best fit with slope equal to 122 kg/m2. Each disk they measured had . the same 0.5 cm thickness. Calculate the density of the unknown material and use the table . below to help determine what material their disks are made of. . The density of the unknown material is about 7.77 g/cm3. Therefore, the material of . | the disks is likely iron. . . Multiple Choice Questions: . . Question 3: The answer is c) r3. Since d = m/v and in this case the volume of spheres are . (4/3)(pi)(r3), the m is linearly proportional to r3. .",
            "url": "https://jiya-sav.github.io/jiya_repository/2022/10/20/AP-Physics-Lab-Example.html",
            "relUrl": "/2022/10/20/AP-Physics-Lab-Example.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random # the jokes data is on the back end (in the AWS server) jokes_data = [] joke_list = [ &quot;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will &quot; &quot;frustrate them for a lifetime.&quot;, &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, &quot;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&quot;, &quot;Enter any 11-digit prime number to continue.&quot;, &quot;If at first you don&#39;t succeed; call it version 1.0.&quot;, &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; &quot;1 byte. And then everything crashed.&quot;, &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, &quot;Q: What’s a aliens favorite computer key? A: the space bar!&quot;, &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, &quot;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&quot;, &quot;Computers make very fast, very accurate mistakes.&quot;, &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39; ] # Initialize jokes # setting up a dictionary to store all the jokes data and how many likes/dislikes each joke gets def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo in a FOR LOOP item_id = 0 for item in joke_list: jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # jokes are being built into a list # Return all jokes from jokes_data def getJokes(): return(jokes_data) # Joke getter def getJoke(id): return(jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): jokes_data[id][&#39;haha&#39;] = jokes_data[id][&#39;haha&#39;] + 1 return jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): jokes_data[id][&#39;boohoo&#39;] = jokes_data[id][&#39;boohoo&#39;] + 1 return jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # have to get jokes out of the back end # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) # we have to store data -- use &quot;str&quot; to add to the counter . Most liked 18 17 An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you? haha: 18 boohoo: 1 Most jeered 8 12 Computers make very fast, very accurate mistakes. haha: 12 boohoo: 8 Random joke 5 Java programmers are some of the most materialistic people I know, very object-oriented haha: 11 boohoo: 3 Jokes Count: 18 . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . How to Make an API . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 --&gt; this URL calls the API from the backend api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes # BASICALLY THE STEPS TO MAKE AN API api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . # server = &quot;http://127.0.0.1:5000/&quot; # run local server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) .",
            "url": "https://jiya-sav.github.io/jiya_repository/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Week6dockerdeployment",
            "content": "",
            "url": "https://jiya-sav.github.io/jiya_repository/2022/10/05/Week6DockerDeployment.html",
            "relUrl": "/2022/10/05/Week6DockerDeployment.html",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;cf94bdc878msh0d7a71de5a787e6p184ceejsnf6177235d280&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) #print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;cf94bdc878msh0d7a71de5a787e6p184ceejsnf6177235d280&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;status&#34;:&#34;success&#34;,&#34;data&#34;:{&#34;stats&#34;:{&#34;total&#34;:1508,&#34;totalCoins&#34;:21815,&#34;totalMarkets&#34;:29551,&#34;totalExchanges&#34;:173,&#34;totalMarketCap&#34;:&#34;957300469284&#34;,&#34;total24hVolume&#34;:&#34;55577561874&#34;},&#34;coins&#34;:[{&#34;uuid&#34;:&#34;Qwsogvtv82FCd&#34;,&#34;symbol&#34;:&#34;BTC&#34;,&#34;name&#34;:&#34;Bitcoin&#34;,&#34;color&#34;:&#34;#f7931A&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg&#34;,&#34;marketCap&#34;:&#34;372690710414&#34;,&#34;price&#34;:&#34;19439.019335898196&#34;,&#34;listedAt&#34;:1330214400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.17&#34;,&#34;rank&#34;:1,&#34;sparkline&#34;:[&#34;20043.120698932926&#34;,&#34;20038.513190294205&#34;,&#34;20014.31756554653&#34;,&#34;19937.405266503127&#34;,&#34;19933.87359656791&#34;,&#34;19982.98629953099&#34;,&#34;20004.6254776679&#34;,&#34;20009.97549846987&#34;,&#34;20020.30975933277&#34;,&#34;20001.325042925328&#34;,&#34;19961.866659856703&#34;,&#34;19951.91939584089&#34;,&#34;19889.511048416964&#34;,&#34;19938.92354509105&#34;,&#34;19986.51818990256&#34;,&#34;19977.743609749126&#34;,&#34;19967.978675256236&#34;,&#34;19994.991483650618&#34;,&#34;19848.664875955077&#34;,&#34;19624.23243724136&#34;,&#34;19637.236335625577&#34;,&#34;19609.7500712524&#34;,&#34;19525.230749243397&#34;,&#34;19421.952102191513&#34;,&#34;19444.324446018705&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc&#34;,&#34;24hVolume&#34;:&#34;28040540126&#34;,&#34;btcPrice&#34;:&#34;1&#34;},{&#34;uuid&#34;:&#34;razxDUgYGNAdQ&#34;,&#34;symbol&#34;:&#34;ETH&#34;,&#34;name&#34;:&#34;Ethereum&#34;,&#34;color&#34;:&#34;#3C3C3D&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rk4RKHOuW/eth.svg&#34;,&#34;marketCap&#34;:&#34;161973495575&#34;,&#34;price&#34;:&#34;1324.072445926556&#34;,&#34;listedAt&#34;:1438905600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.82&#34;,&#34;rank&#34;:2,&#34;sparkline&#34;:[&#34;1358.8871943958604&#34;,&#34;1359.9365932635428&#34;,&#34;1361.312137283555&#34;,&#34;1354.7716275956325&#34;,&#34;1351.5587285033826&#34;,&#34;1354.4917227782435&#34;,&#34;1357.1740569551143&#34;,&#34;1355.001167368168&#34;,&#34;1357.166058492042&#34;,&#34;1357.1258358481575&#34;,&#34;1354.5258432397688&#34;,&#34;1354.4330909366968&#34;,&#34;1352.600344408699&#34;,&#34;1356.3965778668696&#34;,&#34;1357.103282357995&#34;,&#34;1356.928559443544&#34;,&#34;1355.7089388992813&#34;,&#34;1354.7898227519433&#34;,&#34;1344.2876731742765&#34;,&#34;1333.130656132973&#34;,&#34;1338.2940678419895&#34;,&#34;1338.335109875185&#34;,&#34;1331.757928433725&#34;,&#34;1324.6597975362556&#34;,&#34;1324.3451151403124&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth&#34;,&#34;24hVolume&#34;:&#34;12487104721&#34;,&#34;btcPrice&#34;:&#34;0.06811415859242347&#34;},{&#34;uuid&#34;:&#34;HIVsRcGKkPFtW&#34;,&#34;symbol&#34;:&#34;USDT&#34;,&#34;name&#34;:&#34;Tether USD&#34;,&#34;color&#34;:&#34;#22a079&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mgHqwlCLj/usdt.svg&#34;,&#34;marketCap&#34;:&#34;68341358333&#34;,&#34;price&#34;:&#34;1.0001214527505147&#34;,&#34;listedAt&#34;:1420761600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.06&#34;,&#34;rank&#34;:3,&#34;sparkline&#34;:[&#34;1.0006292981065132&#34;,&#34;1.0001664623300697&#34;,&#34;1.000775437805511&#34;,&#34;1.0006560153761246&#34;,&#34;1.0001812058612418&#34;,&#34;0.9997627232208969&#34;,&#34;1.000404188645391&#34;,&#34;1.000273965569077&#34;,&#34;1.0004073776354638&#34;,&#34;1.0003991399714922&#34;,&#34;1.000649287098601&#34;,&#34;1.0006116667950138&#34;,&#34;1.0001805919397455&#34;,&#34;0.9995764035509049&#34;,&#34;0.9999016131304791&#34;,&#34;1.000376421663159&#34;,&#34;1.0000638580990253&#34;,&#34;1.0000251351901497&#34;,&#34;1.0024115585047875&#34;,&#34;1.0007131457376668&#34;,&#34;0.9997643813464417&#34;,&#34;1.0006997190024671&#34;,&#34;1.0011748272550787&#34;,&#34;1.000376807787688&#34;,&#34;1.0000866026679802&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt&#34;,&#34;24hVolume&#34;:&#34;35357149766&#34;,&#34;btcPrice&#34;:&#34;0.000051449172176272&#34;},{&#34;uuid&#34;:&#34;aKzUVe4Hh_CON&#34;,&#34;symbol&#34;:&#34;USDC&#34;,&#34;name&#34;:&#34;USDC&#34;,&#34;color&#34;:&#34;#7894b4&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/jkDf8sQbY/usdc.svg&#34;,&#34;marketCap&#34;:&#34;46174792727&#34;,&#34;price&#34;:&#34;0.9999876451850763&#34;,&#34;listedAt&#34;:1539043200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.04&#34;,&#34;rank&#34;:4,&#34;sparkline&#34;:[&#34;1.0005888497806374&#34;,&#34;1.0001100251247628&#34;,&#34;1.0006761524815857&#34;,&#34;1.0006240224567904&#34;,&#34;1.0001422377162736&#34;,&#34;0.9997407141512569&#34;,&#34;1.0003826895350985&#34;,&#34;1.0002597871769032&#34;,&#34;1.0003368791984284&#34;,&#34;1.000268193130865&#34;,&#34;1.0005400994909093&#34;,&#34;1.0005052065866302&#34;,&#34;1.0002078725471495&#34;,&#34;0.9996305519727716&#34;,&#34;0.9999129246493957&#34;,&#34;1.000337723688206&#34;,&#34;1.0001219223891138&#34;,&#34;1.0000567685803452&#34;,&#34;1.002264387752512&#34;,&#34;1.0008535104434562&#34;,&#34;0.9997753944413241&#34;,&#34;1.0006909344079045&#34;,&#34;1.0011856474376657&#34;,&#34;1.0004558433078905&#34;,&#34;1.0000802139369929&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc&#34;,&#34;24hVolume&#34;:&#34;3625539989&#34;,&#34;btcPrice&#34;:&#34;0.000051442288723814&#34;},{&#34;uuid&#34;:&#34;WcwrkfNI4FUAe&#34;,&#34;symbol&#34;:&#34;BNB&#34;,&#34;name&#34;:&#34;Binance Coin&#34;,&#34;color&#34;:&#34;#e8b342&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1N19L_dZ/bnb.svg&#34;,&#34;marketCap&#34;:&#34;40826172944&#34;,&#34;price&#34;:&#34;281.8012429000166&#34;,&#34;listedAt&#34;:1503014400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.89&#34;,&#34;rank&#34;:5,&#34;sparkline&#34;:[&#34;293.1542017639658&#34;,&#34;291.4495372207941&#34;,&#34;287.2881754656209&#34;,&#34;282.4951572761136&#34;,&#34;283.812890326553&#34;,&#34;285.07046988350487&#34;,&#34;284.6648913651251&#34;,&#34;284.15658429957216&#34;,&#34;284.97418674549846&#34;,&#34;284.14298351174546&#34;,&#34;283.4663952861399&#34;,&#34;284.0198351568632&#34;,&#34;283.98359752026494&#34;,&#34;284.50910592179207&#34;,&#34;284.5884519728603&#34;,&#34;284.24904624568404&#34;,&#34;283.66715391554203&#34;,&#34;283.93635086762833&#34;,&#34;282.97731885381944&#34;,&#34;282.3720073152681&#34;,&#34;283.0936584097051&#34;,&#34;283.1686839386565&#34;,&#34;282.298429032251&#34;,&#34;281.8207296648962&#34;,&#34;281.9590684351817&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb&#34;,&#34;24hVolume&#34;:&#34;1622783715&#34;,&#34;btcPrice&#34;:&#34;0.01449668000379072&#34;},{&#34;uuid&#34;:&#34;-l8Mn2pVlRs-p&#34;,&#34;symbol&#34;:&#34;XRP&#34;,&#34;name&#34;:&#34;XRP&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1oPuTyfX/xrp.svg&#34;,&#34;marketCap&#34;:&#34;25684651016&#34;,&#34;price&#34;:&#34;0.5151501151751078&#34;,&#34;listedAt&#34;:1421798400,&#34;tier&#34;:1,&#34;change&#34;:&#34;3.53&#34;,&#34;rank&#34;:6,&#34;sparkline&#34;:[&#34;0.49589869209833876&#34;,&#34;0.4987992269699254&#34;,&#34;0.4988941263528929&#34;,&#34;0.49413399103535827&#34;,&#34;0.49241387133297837&#34;,&#34;0.49317990293626884&#34;,&#34;0.49220875672175185&#34;,&#34;0.48634326392257954&#34;,&#34;0.48768518353762436&#34;,&#34;0.4889818095673642&#34;,&#34;0.49054148312982615&#34;,&#34;0.48897964006556244&#34;,&#34;0.48800595058934054&#34;,&#34;0.4895291756037178&#34;,&#34;0.4904207910949606&#34;,&#34;0.4910955755572008&#34;,&#34;0.4899709219363271&#34;,&#34;0.49058604255190114&#34;,&#34;0.489399566436949&#34;,&#34;0.49140407548224013&#34;,&#34;0.48985637367255963&#34;,&#34;0.4922661709580377&#34;,&#34;0.49604584631175985&#34;,&#34;0.49658935843368407&#34;,&#34;0.5133683408162016&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp&#34;,&#34;24hVolume&#34;:&#34;2445040692&#34;,&#34;btcPrice&#34;:&#34;0.000026500828373774&#34;},{&#34;uuid&#34;:&#34;vSo2fu9iE1s0Y&#34;,&#34;symbol&#34;:&#34;BUSD&#34;,&#34;name&#34;:&#34;Binance USD&#34;,&#34;color&#34;:&#34;#f0b90b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/6SJHRfClq/busd.svg&#34;,&#34;marketCap&#34;:&#34;21631893910&#34;,&#34;price&#34;:&#34;1.0001753926712795&#34;,&#34;listedAt&#34;:1563197940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.05&#34;,&#34;rank&#34;:7,&#34;sparkline&#34;:[&#34;1.0005706724161327&#34;,&#34;1.000153035075963&#34;,&#34;1.000649403148135&#34;,&#34;1.0006220650289448&#34;,&#34;1.0002388310400654&#34;,&#34;0.999768511927685&#34;,&#34;1.000363884889135&#34;,&#34;1.0002172784412986&#34;,&#34;1.0003771948144895&#34;,&#34;1.000347062224968&#34;,&#34;1.0005538549496038&#34;,&#34;1.00054731343986&#34;,&#34;1.0001249306506546&#34;,&#34;0.9995369894539147&#34;,&#34;0.9998968507276723&#34;,&#34;1.0003435717608904&#34;,&#34;1.0000518569181112&#34;,&#34;1.0000381294884153&#34;,&#34;1.0024537646023772&#34;,&#34;1.000758974432922&#34;,&#34;0.9998955798036765&#34;,&#34;1.0006810265898622&#34;,&#34;1.001286243970952&#34;,&#34;1.0004454209643363&#34;,&#34;1.000131872419806&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd&#34;,&#34;24hVolume&#34;:&#34;5613974486&#34;,&#34;btcPrice&#34;:&#34;0.000051451947003533&#34;},{&#34;uuid&#34;:&#34;qzawljRxB5bYu&#34;,&#34;symbol&#34;:&#34;ADA&#34;,&#34;name&#34;:&#34;Cardano&#34;,&#34;color&#34;:&#34;#3cc8c8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ryY28nXhW/ada.svg&#34;,&#34;marketCap&#34;:&#34;13204439561&#34;,&#34;price&#34;:&#34;0.42440967570784466&#34;,&#34;listedAt&#34;:1506902400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.21&#34;,&#34;rank&#34;:8,&#34;sparkline&#34;:[&#34;0.42893471278852885&#34;,&#34;0.42894916983802617&#34;,&#34;0.4292860792653158&#34;,&#34;0.4278328859211919&#34;,&#34;0.42849767382513404&#34;,&#34;0.42917041020433944&#34;,&#34;0.4284158050320036&#34;,&#34;0.4277735296960406&#34;,&#34;0.4284540115697459&#34;,&#34;0.4283447382893527&#34;,&#34;0.42755442629481355&#34;,&#34;0.4277070795160678&#34;,&#34;0.42668536894486625&#34;,&#34;0.4276717465384528&#34;,&#34;0.4284452012202659&#34;,&#34;0.4277685752310844&#34;,&#34;0.42707904717943374&#34;,&#34;0.4276498709732234&#34;,&#34;0.42587008801058757&#34;,&#34;0.423841798468834&#34;,&#34;0.42393410627123557&#34;,&#34;0.4243726019917392&#34;,&#34;0.42400817328436324&#34;,&#34;0.4236607890958435&#34;,&#34;0.4238604433041137&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada&#34;,&#34;24hVolume&#34;:&#34;501510723&#34;,&#34;btcPrice&#34;:&#34;0.000021832874816071&#34;},{&#34;uuid&#34;:&#34;zNZHO_Sjf&#34;,&#34;symbol&#34;:&#34;SOL&#34;,&#34;name&#34;:&#34;Solana&#34;,&#34;color&#34;:&#34;#9cddec&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/yvUG4Qex5/solana.svg&#34;,&#34;marketCap&#34;:&#34;11694210956&#34;,&#34;price&#34;:&#34;32.874319732515566&#34;,&#34;listedAt&#34;:1586539320,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.66&#34;,&#34;rank&#34;:9,&#34;sparkline&#34;:[&#34;33.703589618770835&#34;,&#34;33.69854950295876&#34;,&#34;33.67640936711427&#34;,&#34;33.46912372815383&#34;,&#34;33.38509331593979&#34;,&#34;33.39185608009876&#34;,&#34;33.474151302364405&#34;,&#34;33.51861020492022&#34;,&#34;33.71397505389989&#34;,&#34;33.670085321598656&#34;,&#34;33.51235571586997&#34;,&#34;33.46106004167397&#34;,&#34;33.30245980475054&#34;,&#34;33.35984425628457&#34;,&#34;33.42358790951426&#34;,&#34;33.31478768740784&#34;,&#34;33.236963272035126&#34;,&#34;33.3273547697683&#34;,&#34;33.01414773930776&#34;,&#34;32.90359933277737&#34;,&#34;32.96005345374723&#34;,&#34;32.98639954181689&#34;,&#34;32.88543822281865&#34;,&#34;32.9008800956315&#34;,&#34;32.90710331783348&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/zNZHO_Sjf+solana-sol&#34;,&#34;24hVolume&#34;:&#34;711939317&#34;,&#34;btcPrice&#34;:&#34;0.001691151141138395&#34;},{&#34;uuid&#34;:&#34;a91GCGd_u96cF&#34;,&#34;symbol&#34;:&#34;DOGE&#34;,&#34;name&#34;:&#34;Dogecoin&#34;,&#34;color&#34;:&#34;#c2a633&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/H1arXIuOZ/doge.svg&#34;,&#34;marketCap&#34;:&#34;8194973512&#34;,&#34;price&#34;:&#34;0.061769249278769194&#34;,&#34;listedAt&#34;:1391212800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.39&#34;,&#34;rank&#34;:10,&#34;sparkline&#34;:[&#34;0.06390511491475483&#34;,&#34;0.06392382232016418&#34;,&#34;0.06388458528326176&#34;,&#34;0.06331627736470453&#34;,&#34;0.06352967302066473&#34;,&#34;0.06343149388708008&#34;,&#34;0.06341046651070184&#34;,&#34;0.06334139698205167&#34;,&#34;0.06349651068921282&#34;,&#34;0.06358840368812939&#34;,&#34;0.06340618185260305&#34;,&#34;0.06337305740004877&#34;,&#34;0.06313924144493711&#34;,&#34;0.06322596955765868&#34;,&#34;0.06338809522371606&#34;,&#34;0.06332660386981696&#34;,&#34;0.06327499174978897&#34;,&#34;0.06334045977297618&#34;,&#34;0.06275547166757775&#34;,&#34;0.062398460697843466&#34;,&#34;0.0623201947726625&#34;,&#34;0.062314077098287304&#34;,&#34;0.06196911431843746&#34;,&#34;0.06164004436993156&#34;,&#34;0.06176006035170465&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge&#34;,&#34;24hVolume&#34;:&#34;420118702&#34;,&#34;btcPrice&#34;:&#34;0.000003177590814198&#34;},{&#34;uuid&#34;:&#34;25W7FG7om&#34;,&#34;symbol&#34;:&#34;DOT&#34;,&#34;name&#34;:&#34;Polkadot&#34;,&#34;color&#34;:&#34;#d64cA8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/RsljYqnbu/polkadot.svg&#34;,&#34;marketCap&#34;:&#34;7252344895&#34;,&#34;price&#34;:&#34;6.302268837898188&#34;,&#34;listedAt&#34;:1598365200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.31&#34;,&#34;rank&#34;:11,&#34;sparkline&#34;:[&#34;6.383911302063362&#34;,&#34;6.376936887727368&#34;,&#34;6.3577131283615085&#34;,&#34;6.338719779105361&#34;,&#34;6.335503566363757&#34;,&#34;6.347868826887101&#34;,&#34;6.360563967594642&#34;,&#34;6.359254952998797&#34;,&#34;6.372191966406333&#34;,&#34;6.376418063868698&#34;,&#34;6.364493792272273&#34;,&#34;6.377711619413881&#34;,&#34;6.361254744606591&#34;,&#34;6.370657576199347&#34;,&#34;6.377194587813874&#34;,&#34;6.367669555857326&#34;,&#34;6.35816358173928&#34;,&#34;6.365808329730561&#34;,&#34;6.337021776168239&#34;,&#34;6.300741502038516&#34;,&#34;6.3078653507566775&#34;,&#34;6.314587046306293&#34;,&#34;6.298489342009168&#34;,&#34;6.293790193133084&#34;,&#34;6.290330689602958&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/25W7FG7om+polkadot-dot&#34;,&#34;24hVolume&#34;:&#34;335481407&#34;,&#34;btcPrice&#34;:&#34;0.000324207138693449&#34;},{&#34;uuid&#34;:&#34;uW2tk-ILY0ii&#34;,&#34;symbol&#34;:&#34;MATIC&#34;,&#34;name&#34;:&#34;Polygon&#34;,&#34;color&#34;:&#34;#8247e5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WulYRq14o/polygon.png&#34;,&#34;marketCap&#34;:&#34;7243387601&#34;,&#34;price&#34;:&#34;0.8272795130492796&#34;,&#34;listedAt&#34;:1558961160,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.81&#34;,&#34;rank&#34;:12,&#34;sparkline&#34;:[&#34;0.840853088376991&#34;,&#34;0.839103735561316&#34;,&#34;0.840023715872101&#34;,&#34;0.8373126108670681&#34;,&#34;0.8346405154054501&#34;,&#34;0.8338960402639366&#34;,&#34;0.8379949531916675&#34;,&#34;0.8370892468288218&#34;,&#34;0.8413426298893618&#34;,&#34;0.8430377116997708&#34;,&#34;0.8405747789737558&#34;,&#34;0.8410656722417719&#34;,&#34;0.8385458630801054&#34;,&#34;0.8405262044359398&#34;,&#34;0.8443592202816597&#34;,&#34;0.8453853709670638&#34;,&#34;0.8445007934663421&#34;,&#34;0.8452092393366917&#34;,&#34;0.8407424300885237&#34;,&#34;0.8382622782356483&#34;,&#34;0.8386166571299793&#34;,&#34;0.8388163025222611&#34;,&#34;0.8350688353506496&#34;,&#34;0.8314356125791018&#34;,&#34;0.8284754787765596&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic&#34;,&#34;24hVolume&#34;:&#34;532645288&#34;,&#34;btcPrice&#34;:&#34;0.000042557677357805&#34;},{&#34;uuid&#34;:&#34;xz24e0BjL&#34;,&#34;symbol&#34;:&#34;SHIB&#34;,&#34;name&#34;:&#34;Shiba Inu&#34;,&#34;color&#34;:&#34;#fda32b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/D69LfI-tm/shib.png&#34;,&#34;marketCap&#34;:&#34;6481255080&#34;,&#34;price&#34;:&#34;0.000010993463080138&#34;,&#34;listedAt&#34;:1620650373,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.72&#34;,&#34;rank&#34;:13,&#34;sparkline&#34;:[&#34;0.000011281152874381&#34;,&#34;0.000011274776440929&#34;,&#34;0.000011266403686778&#34;,&#34;0.000011163030801061&#34;,&#34;0.000011177222215474&#34;,&#34;0.000011209085991792&#34;,&#34;0.000011227368570331&#34;,&#34;0.000011214788047926&#34;,&#34;0.000011227838345122&#34;,&#34;0.00001121771790559&#34;,&#34;0.00001118802621718&#34;,&#34;0.000011185470768671&#34;,&#34;0.000011165339984525&#34;,&#34;0.000011178371562787&#34;,&#34;0.000011189569397241&#34;,&#34;0.000011195855367395&#34;,&#34;0.000011188635324899&#34;,&#34;0.000011194501678003&#34;,&#34;0.000011113037704384&#34;,&#34;0.000011069847381702&#34;,&#34;0.000011072808740038&#34;,&#34;0.000011082808175224&#34;,&#34;0.000011045869056248&#34;,&#34;0.000011012524259513&#34;,&#34;0.000010995133030907&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/xz24e0BjL+shibainu-shib&#34;,&#34;24hVolume&#34;:&#34;306604405&#34;,&#34;btcPrice&#34;:&#34;5.65535889e-10&#34;},{&#34;uuid&#34;:&#34;MoTuySvg7&#34;,&#34;symbol&#34;:&#34;DAI&#34;,&#34;name&#34;:&#34;Dai&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg&#34;,&#34;marketCap&#34;:&#34;6315699391&#34;,&#34;price&#34;:&#34;1.0000693628240345&#34;,&#34;listedAt&#34;:1585574040,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.00&#34;,&#34;rank&#34;:14,&#34;sparkline&#34;:[&#34;1.0003211288755538&#34;,&#34;0.9998946291225232&#34;,&#34;1.0003017623972386&#34;,&#34;1.000426420585433&#34;,&#34;0.9999595226709206&#34;,&#34;0.9995782073117322&#34;,&#34;1.0001571308250299&#34;,&#34;1.000028784574212&#34;,&#34;1.0001352701748754&#34;,&#34;1.0001160429217384&#34;,&#34;1.0003295353496795&#34;,&#34;1.0002399916588673&#34;,&#34;0.9999416043599832&#34;,&#34;0.99940251691027&#34;,&#34;0.9996481578664514&#34;,&#34;1.0000942277452887&#34;,&#34;0.9998705804888384&#34;,&#34;0.999829535192461&#34;,&#34;1.001896142335365&#34;,&#34;1.000536930073587&#34;,&#34;0.9995610099243101&#34;,&#34;1.0004065534897875&#34;,&#34;1.0009965574614426&#34;,&#34;1.0002987248494222&#34;,&#34;0.9997414141006202&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/MoTuySvg7+dai-dai&#34;,&#34;24hVolume&#34;:&#34;110185029&#34;,&#34;btcPrice&#34;:&#34;0.000051446492518128&#34;},{&#34;uuid&#34;:&#34;qUhEFk1I61atv&#34;,&#34;symbol&#34;:&#34;TRX&#34;,&#34;name&#34;:&#34;TRON&#34;,&#34;color&#34;:&#34;#eb0029&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/behejNqQs/trx.svg&#34;,&#34;marketCap&#34;:&#34;5769185460&#34;,&#34;price&#34;:&#34;0.06248121489307172&#34;,&#34;listedAt&#34;:1505260800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.18&#34;,&#34;rank&#34;:15,&#34;sparkline&#34;:[&#34;0.06256139889443865&#34;,&#34;0.06255560357742032&#34;,&#34;0.0625461507949439&#34;,&#34;0.06269710780670107&#34;,&#34;0.06294074701409155&#34;,&#34;0.06283084412394735&#34;,&#34;0.06301107616732748&#34;,&#34;0.062974735046321&#34;,&#34;0.06318503644515941&#34;,&#34;0.06313205144133993&#34;,&#34;0.06304547470814106&#34;,&#34;0.06303434982375392&#34;,&#34;0.06280895834308321&#34;,&#34;0.06285772925656463&#34;,&#34;0.06288595688393654&#34;,&#34;0.06283254979727228&#34;,&#34;0.06279801302663936&#34;,&#34;0.06282166370645889&#34;,&#34;0.06268174053937971&#34;,&#34;0.06245473398536933&#34;,&#34;0.06241180902551138&#34;,&#34;0.062386259116473566&#34;,&#34;0.06229995542087092&#34;,&#34;0.062256606921008865&#34;,&#34;0.06240105097526573&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qUhEFk1I61atv+tron-trx&#34;,&#34;24hVolume&#34;:&#34;501465580&#34;,&#34;btcPrice&#34;:&#34;0.000003214216407393&#34;},{&#34;uuid&#34;:&#34;Mtfb0obXVh59u&#34;,&#34;symbol&#34;:&#34;WETH&#34;,&#34;name&#34;:&#34;Wrapped Ether&#34;,&#34;color&#34;:&#34;#303030&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/KIviQyZlt/weth.svg&#34;,&#34;marketCap&#34;:&#34;5392424187&#34;,&#34;price&#34;:&#34;1323.3960500594292&#34;,&#34;listedAt&#34;:1600259445,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.77&#34;,&#34;rank&#34;:16,&#34;sparkline&#34;:[&#34;1359.2430268018784&#34;,&#34;1358.4109573609232&#34;,&#34;1362.0560583184617&#34;,&#34;1355.1319915746794&#34;,&#34;1351.7758597091195&#34;,&#34;1352.9180734767824&#34;,&#34;1358.7895109888284&#34;,&#34;1356.5456618111082&#34;,&#34;1357.715565094409&#34;,&#34;1357.7485144301975&#34;,&#34;1355.221157894851&#34;,&#34;1354.9872885368293&#34;,&#34;1352.9445437692711&#34;,&#34;1355.0772884117262&#34;,&#34;1356.2929663698828&#34;,&#34;1359.439248566937&#34;,&#34;1356.6358373947003&#34;,&#34;1371.3033080554198&#34;,&#34;1338.0084044725368&#34;,&#34;1327.3693430341373&#34;,&#34;1326.952715498709&#34;,&#34;1343.4546651344417&#34;,&#34;1337.4287738214991&#34;,&#34;1332.1323844523033&#34;,&#34;1322.5563927922476&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth&#34;,&#34;24hVolume&#34;:&#34;131877290&#34;,&#34;btcPrice&#34;:&#34;0.06805991911346775&#34;},{&#34;uuid&#34;:&#34;_H5FVG9iW&#34;,&#34;symbol&#34;:&#34;UNI&#34;,&#34;name&#34;:&#34;Uniswap&#34;,&#34;color&#34;:&#34;#ff007a&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;5236317580&#34;,&#34;price&#34;:&#34;6.743055901991712&#34;,&#34;listedAt&#34;:1600323371,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.31&#34;,&#34;rank&#34;:17,&#34;sparkline&#34;:[&#34;6.906260196341115&#34;,&#34;6.926282331972101&#34;,&#34;6.955769183326663&#34;,&#34;6.907822687033632&#34;,&#34;6.884697978812077&#34;,&#34;6.9073595596404616&#34;,&#34;6.987398200893361&#34;,&#34;6.996503442261614&#34;,&#34;7.053715252882675&#34;,&#34;7.002865857213144&#34;,&#34;6.954519008942882&#34;,&#34;6.9426621250674065&#34;,&#34;6.907481993862483&#34;,&#34;6.9133234814261835&#34;,&#34;6.93552677244718&#34;,&#34;6.928600552276933&#34;,&#34;6.897505951826379&#34;,&#34;6.911998894284303&#34;,&#34;6.912306616401329&#34;,&#34;6.925213673678196&#34;,&#34;6.965001748129542&#34;,&#34;6.977431642989423&#34;,&#34;6.89596979557213&#34;,&#34;6.803049696082989&#34;,&#34;6.761918213026164&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/_H5FVG9iW+uniswap-uni&#34;,&#34;24hVolume&#34;:&#34;162511450&#34;,&#34;btcPrice&#34;:&#34;0.000346882514260339&#34;},{&#34;uuid&#34;:&#34;dvUj0CzDZ&#34;,&#34;symbol&#34;:&#34;AVAX&#34;,&#34;name&#34;:&#34;Avalanche&#34;,&#34;color&#34;:&#34;#e84242&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png&#34;,&#34;marketCap&#34;:&#34;4976527755&#34;,&#34;price&#34;:&#34;16.80589106314172&#34;,&#34;listedAt&#34;:1600961596,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.29&#34;,&#34;rank&#34;:18,&#34;sparkline&#34;:[&#34;17.166624422614657&#34;,&#34;17.142458635344678&#34;,&#34;17.135117365005694&#34;,&#34;17.082959355054292&#34;,&#34;17.06216601221466&#34;,&#34;17.085863902739835&#34;,&#34;17.121698680092805&#34;,&#34;17.110931777901268&#34;,&#34;17.137334674073184&#34;,&#34;17.121757469833575&#34;,&#34;17.07654015386106&#34;,&#34;17.092932075207603&#34;,&#34;17.049274221394413&#34;,&#34;17.075658508385757&#34;,&#34;17.127863501383832&#34;,&#34;17.112814617135868&#34;,&#34;17.078117062454428&#34;,&#34;17.074250385489304&#34;,&#34;16.963845322416518&#34;,&#34;16.90431068967586&#34;,&#34;16.924560813512244&#34;,&#34;16.926490401722827&#34;,&#34;16.843526886162675&#34;,&#34;16.804720275026092&#34;,&#34;16.81999575526479&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax&#34;,&#34;24hVolume&#34;:&#34;183761509&#34;,&#34;btcPrice&#34;:&#34;0.000864544181614457&#34;},{&#34;uuid&#34;:&#34;Knsels4_Ol-Ny&#34;,&#34;symbol&#34;:&#34;ATOM&#34;,&#34;name&#34;:&#34;Cosmos&#34;,&#34;color&#34;:&#34;#5064fb&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HJzHboruM/atom.svg&#34;,&#34;marketCap&#34;:&#34;3993418630&#34;,&#34;price&#34;:&#34;12.82359764347695&#34;,&#34;listedAt&#34;:1552520100,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.73&#34;,&#34;rank&#34;:19,&#34;sparkline&#34;:[&#34;13.138648679485907&#34;,&#34;13.126266040905023&#34;,&#34;13.0788760086511&#34;,&#34;12.968365113585525&#34;,&#34;12.974903554633963&#34;,&#34;12.991147758786969&#34;,&#34;12.960897560954534&#34;,&#34;12.953559687807576&#34;,&#34;13.031924087007571&#34;,&#34;12.99651215660876&#34;,&#34;12.923026658925869&#34;,&#34;12.94240607676966&#34;,&#34;12.887309249236027&#34;,&#34;12.927456953327377&#34;,&#34;12.995192217296129&#34;,&#34;12.970677544611977&#34;,&#34;12.915863998792393&#34;,&#34;12.951525165018392&#34;,&#34;12.86213543199673&#34;,&#34;12.83908602390948&#34;,&#34;12.840558262177357&#34;,&#34;12.856748556227853&#34;,&#34;12.820186800042293&#34;,&#34;12.828694780686737&#34;,&#34;12.838122797866081&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom&#34;,&#34;24hVolume&#34;:&#34;344477266&#34;,&#34;btcPrice&#34;:&#34;0.000659683362719616&#34;},{&#34;uuid&#34;:&#34;PDKcptVnzJTmN&#34;,&#34;symbol&#34;:&#34;OKB&#34;,&#34;name&#34;:&#34;OKB&#34;,&#34;color&#34;:&#34;#2d60e0&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xcZdYtX6E/okx.png&#34;,&#34;marketCap&#34;:&#34;3916109044&#34;,&#34;price&#34;:&#34;15.563113364428492&#34;,&#34;listedAt&#34;:1538524800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.60&#34;,&#34;rank&#34;:20,&#34;sparkline&#34;:[&#34;15.653644520042677&#34;,&#34;15.659860500306584&#34;,&#34;15.647329637644804&#34;,&#34;15.587118458725232&#34;,&#34;15.563935094444144&#34;,&#34;15.56008026907353&#34;,&#34;15.550078524778266&#34;,&#34;15.536881354933358&#34;,&#34;15.556995588806304&#34;,&#34;15.569886901908193&#34;,&#34;15.583723378271857&#34;,&#34;15.612947435079517&#34;,&#34;15.621330755281138&#34;,&#34;15.685101615037869&#34;,&#34;15.734019604217213&#34;,&#34;15.716209049581757&#34;,&#34;15.741765333638698&#34;,&#34;15.782732028406423&#34;,&#34;15.675805042245777&#34;,&#34;15.60368287059606&#34;,&#34;15.609914130851282&#34;,&#34;15.672020775153623&#34;,&#34;15.63349567031231&#34;,&#34;15.54905095679726&#34;,&#34;15.574691417040764&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb&#34;,&#34;24hVolume&#34;:&#34;12185048&#34;,&#34;btcPrice&#34;:&#34;0.000800612062548236&#34;},{&#34;uuid&#34;:&#34;D7B1x_ks7WhV5&#34;,&#34;symbol&#34;:&#34;LTC&#34;,&#34;name&#34;:&#34;Litecoin&#34;,&#34;color&#34;:&#34;#345d9d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg&#34;,&#34;marketCap&#34;:&#34;3727561499&#34;,&#34;price&#34;:&#34;52.60065314650705&#34;,&#34;listedAt&#34;:1382572800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.92&#34;,&#34;rank&#34;:21,&#34;sparkline&#34;:[&#34;54.07211341462417&#34;,&#34;53.908549990159905&#34;,&#34;53.78388608969654&#34;,&#34;53.601526595035686&#34;,&#34;53.54079351521885&#34;,&#34;53.55289918873499&#34;,&#34;53.43603358958882&#34;,&#34;53.3822606804191&#34;,&#34;53.606088413074104&#34;,&#34;53.608748009373166&#34;,&#34;53.55002071293169&#34;,&#34;53.62847727265506&#34;,&#34;53.27745114084239&#34;,&#34;53.50375027966493&#34;,&#34;53.6029911838065&#34;,&#34;53.5129004226274&#34;,&#34;53.400244446113064&#34;,&#34;53.4831288081858&#34;,&#34;53.19392584086213&#34;,&#34;52.72834498517373&#34;,&#34;52.75371369318262&#34;,&#34;52.730426952760034&#34;,&#34;52.68518775416463&#34;,&#34;52.57292614751557&#34;,&#34;52.660272749172385&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc&#34;,&#34;24hVolume&#34;:&#34;659666171&#34;,&#34;btcPrice&#34;:&#34;0.002705931417505666&#34;},{&#34;uuid&#34;:&#34;NfeOYfNcl&#34;,&#34;symbol&#34;:&#34;FTT&#34;,&#34;name&#34;:&#34;FTX Token&#34;,&#34;color&#34;:&#34;#77d9ed&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg&#34;,&#34;marketCap&#34;:&#34;3249991368&#34;,&#34;price&#34;:&#34;24.346629216418222&#34;,&#34;listedAt&#34;:1566222960,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.62&#34;,&#34;rank&#34;:22,&#34;sparkline&#34;:[&#34;24.697364245107416&#34;,&#34;24.67609556033226&#34;,&#34;24.602711049393005&#34;,&#34;24.457093516890843&#34;,&#34;24.439217638237896&#34;,&#34;24.537308610901174&#34;,&#34;24.555005033451096&#34;,&#34;24.528815526703678&#34;,&#34;24.564409356919914&#34;,&#34;24.53889638414545&#34;,&#34;24.48569012938093&#34;,&#34;24.495317368452877&#34;,&#34;24.4366827713594&#34;,&#34;24.541909476319535&#34;,&#34;24.63002366476886&#34;,&#34;24.60710140666744&#34;,&#34;24.744514381182483&#34;,&#34;25.317532369852632&#34;,&#34;24.99156330699888&#34;,&#34;24.774541875758842&#34;,&#34;24.76509822636856&#34;,&#34;24.665942801699046&#34;,&#34;24.502898780972597&#34;,&#34;24.3370185846374&#34;,&#34;24.34622568164908&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt&#34;,&#34;24hVolume&#34;:&#34;132980299&#34;,&#34;btcPrice&#34;:&#34;0.001252461803536411&#34;},{&#34;uuid&#34;:&#34;hnfQfsYfeIGUQ&#34;,&#34;symbol&#34;:&#34;ETC&#34;,&#34;name&#34;:&#34;Ethereum Classic&#34;,&#34;color&#34;:&#34;#699070&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rJfyor__W/etc.svg&#34;,&#34;marketCap&#34;:&#34;3186690888&#34;,&#34;price&#34;:&#34;27.397476607187254&#34;,&#34;listedAt&#34;:1469577600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.13&#34;,&#34;rank&#34;:23,&#34;sparkline&#34;:[&#34;27.96440421697645&#34;,&#34;27.986716674584613&#34;,&#34;28.072818628186713&#34;,&#34;27.847676419911235&#34;,&#34;27.789455023338718&#34;,&#34;27.809002541046432&#34;,&#34;27.775102125888424&#34;,&#34;27.649941223135727&#34;,&#34;27.753360205719076&#34;,&#34;27.755628485712126&#34;,&#34;27.72508444180972&#34;,&#34;27.70881196483682&#34;,&#34;27.664337727017866&#34;,&#34;27.7272580257678&#34;,&#34;27.80140052206014&#34;,&#34;27.754982954083903&#34;,&#34;27.684630916191708&#34;,&#34;27.6766355146109&#34;,&#34;27.577212163533463&#34;,&#34;27.44281008801654&#34;,&#34;27.410468106883418&#34;,&#34;27.386899626090944&#34;,&#34;27.329932419162212&#34;,&#34;27.319575207201066&#34;,&#34;27.341271406400796&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc&#34;,&#34;24hVolume&#34;:&#34;611638587&#34;,&#34;btcPrice&#34;:&#34;0.001409406314885037&#34;},{&#34;uuid&#34;:&#34;3mVx2FX_iJFp5&#34;,&#34;symbol&#34;:&#34;XMR&#34;,&#34;name&#34;:&#34;Monero&#34;,&#34;color&#34;:&#34;#ff7519&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg&#34;,&#34;marketCap&#34;:&#34;2632139347&#34;,&#34;price&#34;:&#34;144.75053086208075&#34;,&#34;listedAt&#34;:1422489600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.14&#34;,&#34;rank&#34;:24,&#34;sparkline&#34;:[&#34;145.50124536788692&#34;,&#34;146.19190968859888&#34;,&#34;149.26987776152095&#34;,&#34;150.94738324275147&#34;,&#34;149.49279826144354&#34;,&#34;148.97943422325662&#34;,&#34;148.5373357181997&#34;,&#34;147.95840188009026&#34;,&#34;147.38074158911468&#34;,&#34;146.89707347178867&#34;,&#34;148.0768196589802&#34;,&#34;148.1019345894606&#34;,&#34;147.52637141917333&#34;,&#34;147.90089463659734&#34;,&#34;148.0402243024737&#34;,&#34;148.1647808335165&#34;,&#34;147.19599591803825&#34;,&#34;146.62526540019402&#34;,&#34;145.6423890284941&#34;,&#34;145.4289861364331&#34;,&#34;145.87625221723815&#34;,&#34;146.22281075355642&#34;,&#34;145.80991948691235&#34;,&#34;145.12004514440844&#34;,&#34;144.87827666930917&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr&#34;,&#34;24hVolume&#34;:&#34;168499247&#34;,&#34;btcPrice&#34;:&#34;0.00744639060031021&#34;},{&#34;uuid&#34;:&#34;f3iaFeCKEmkaZ&#34;,&#34;symbol&#34;:&#34;XLM&#34;,&#34;name&#34;:&#34;Stellar&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg&#34;,&#34;marketCap&#34;:&#34;2458819455&#34;,&#34;price&#34;:&#34;0.1216904598872746&#34;,&#34;listedAt&#34;:1484611200,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.30&#34;,&#34;rank&#34;:25,&#34;sparkline&#34;:[&#34;0.12015405004859882&#34;,&#34;0.1201964059857966&#34;,&#34;0.12047192003671196&#34;,&#34;0.1196173106395648&#34;,&#34;0.11906724764708329&#34;,&#34;0.11958637307490695&#34;,&#34;0.11957339906859445&#34;,&#34;0.11912856302229044&#34;,&#34;0.11919270566046916&#34;,&#34;0.11950336050628312&#34;,&#34;0.11915561324867864&#34;,&#34;0.11873288452214605&#34;,&#34;0.11844090995814378&#34;,&#34;0.11849372941439706&#34;,&#34;0.11850183204146121&#34;,&#34;0.1185842731945294&#34;,&#34;0.11831431415674944&#34;,&#34;0.11851984331716217&#34;,&#34;0.11797481573767714&#34;,&#34;0.11786345599004361&#34;,&#34;0.11795172572027302&#34;,&#34;0.11778644745297576&#34;,&#34;0.11775470899693355&#34;,&#34;0.11787112124179233&#34;,&#34;0.12057810021840691&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm&#34;,&#34;24hVolume&#34;:&#34;209176372&#34;,&#34;btcPrice&#34;:&#34;0.000006260113114994&#34;},{&#34;uuid&#34;:&#34;TpHE2IShQw-sJ&#34;,&#34;symbol&#34;:&#34;ALGO&#34;,&#34;name&#34;:&#34;Algorand&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/lzbmCkUGB/algo.svg&#34;,&#34;marketCap&#34;:&#34;2362922524&#34;,&#34;price&#34;:&#34;0.33683275912004623&#34;,&#34;listedAt&#34;:1562082540,&#34;tier&#34;:1,&#34;change&#34;:&#34;-4.22&#34;,&#34;rank&#34;:26,&#34;sparkline&#34;:[&#34;0.3505307498646579&#34;,&#34;0.3506939607980859&#34;,&#34;0.3509426013870849&#34;,&#34;0.34885338998384524&#34;,&#34;0.348327885859948&#34;,&#34;0.34898148802636386&#34;,&#34;0.3487907146036207&#34;,&#34;0.34694099488944324&#34;,&#34;0.34733390766542993&#34;,&#34;0.3471450675503602&#34;,&#34;0.34631253642923543&#34;,&#34;0.34514364949005727&#34;,&#34;0.3429136350366012&#34;,&#34;0.3431450201541369&#34;,&#34;0.34380367242480914&#34;,&#34;0.34345102970483843&#34;,&#34;0.3435851900728986&#34;,&#34;0.3442811581503051&#34;,&#34;0.3415539328730185&#34;,&#34;0.3415050150131677&#34;,&#34;0.34169985843841577&#34;,&#34;0.34150693966889717&#34;,&#34;0.3401385991632804&#34;,&#34;0.33938566916715&#34;,&#34;0.3374604126062927&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo&#34;,&#34;24hVolume&#34;:&#34;197663216&#34;,&#34;btcPrice&#34;:&#34;0.000017327662126351&#34;},{&#34;uuid&#34;:&#34;9_jH48RBW&#34;,&#34;symbol&#34;:&#34;BTCB&#34;,&#34;name&#34;:&#34;Bitcoin BEP2&#34;,&#34;color&#34;:&#34;#ff9d14&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Swr_SeZio/4023.png&#34;,&#34;marketCap&#34;:&#34;2236665904&#34;,&#34;price&#34;:&#34;19881.29798080624&#34;,&#34;listedAt&#34;:1629334963,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.07&#34;,&#34;rank&#34;:27,&#34;sparkline&#34;:[&#34;20063.245776801265&#34;,&#34;20047.937617307784&#34;,&#34;20022.106979163644&#34;,&#34;19946.937851910694&#34;,&#34;19975.98380823583&#34;,&#34;20016.910227879118&#34;,&#34;20018.454631988945&#34;,&#34;19990.34630658885&#34;,&#34;20027.09258562237&#34;,&#34;19997.02741421444&#34;,&#34;19974.222816566868&#34;,&#34;19988.3867534937&#34;,&#34;19982.88657614091&#34;,&#34;19999.95357559853&#34;,&#34;20009.6036404494&#34;,&#34;20001.412954672614&#34;,&#34;19977.987859247773&#34;,&#34;19985.9085822051&#34;,&#34;19964.691878204376&#34;,&#34;19916.976309318547&#34;,&#34;19936.10534833998&#34;,&#34;19953.377924131433&#34;,&#34;19919.679008196836&#34;,&#34;19886.93592897246&#34;,&#34;19889.800897011646&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb&#34;,&#34;24hVolume&#34;:&#34;22373023&#34;,&#34;btcPrice&#34;:&#34;1.0224600053654826&#34;},{&#34;uuid&#34;:&#34;ZlZpzOJo43mIo&#34;,&#34;symbol&#34;:&#34;BCH&#34;,&#34;name&#34;:&#34;Bitcoin Cash&#34;,&#34;color&#34;:&#34;#8dc451&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/By8ziihX7/bch.svg&#34;,&#34;marketCap&#34;:&#34;2229335606&#34;,&#34;price&#34;:&#34;116.52757341656209&#34;,&#34;listedAt&#34;:1541808000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.28&#34;,&#34;rank&#34;:28,&#34;sparkline&#34;:[&#34;119.89475950337406&#34;,&#34;118.8740167470858&#34;,&#34;118.90185148820068&#34;,&#34;118.4371917141885&#34;,&#34;118.66628984507811&#34;,&#34;118.74461889183415&#34;,&#34;119.16308983887781&#34;,&#34;119.45549130394954&#34;,&#34;120.02168981640177&#34;,&#34;119.81607891345519&#34;,&#34;119.61372975976973&#34;,&#34;119.79889096355504&#34;,&#34;119.04929596146816&#34;,&#34;118.84075320875925&#34;,&#34;118.9754576681774&#34;,&#34;118.58710382876951&#34;,&#34;118.1804571370503&#34;,&#34;118.31480366218062&#34;,&#34;117.43899847650893&#34;,&#34;116.65158634683941&#34;,&#34;116.6447963642678&#34;,&#34;116.63941462908227&#34;,&#34;116.38759317261965&#34;,&#34;116.23770043051937&#34;,&#34;116.57666266876714&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch&#34;,&#34;24hVolume&#34;:&#34;244834885&#34;,&#34;btcPrice&#34;:&#34;0.005994519137154705&#34;},{&#34;uuid&#34;:&#34;DCrsaMv68&#34;,&#34;symbol&#34;:&#34;NEAR&#34;,&#34;name&#34;:&#34;NEAR Protocol&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Cth83dCnl/near.png&#34;,&#34;marketCap&#34;:&#34;2150638397&#34;,&#34;price&#34;:&#34;3.5381400861796455&#34;,&#34;listedAt&#34;:1615164591,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.11&#34;,&#34;rank&#34;:29,&#34;sparkline&#34;:[&#34;3.6446237475772394&#34;,&#34;3.638708890026453&#34;,&#34;3.6213469787983863&#34;,&#34;3.6039345894104784&#34;,&#34;3.609748601817281&#34;,&#34;3.616990152686004&#34;,&#34;3.621284475571411&#34;,&#34;3.607532592055539&#34;,&#34;3.610203448393505&#34;,&#34;3.6063865494498635&#34;,&#34;3.594536031171721&#34;,&#34;3.594353013513532&#34;,&#34;3.5818950578597284&#34;,&#34;3.5908379791326466&#34;,&#34;3.6049374604500675&#34;,&#34;3.609956890939964&#34;,&#34;3.599628063339131&#34;,&#34;3.5985069197906414&#34;,&#34;3.5672852480600823&#34;,&#34;3.548516036166141&#34;,&#34;3.5559489238202544&#34;,&#34;3.5560882508059146&#34;,&#34;3.538918079095562&#34;,&#34;3.535834629604094&#34;,&#34;3.5357697517129&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/DCrsaMv68+nearprotocol-near&#34;,&#34;24hVolume&#34;:&#34;151988401&#34;,&#34;btcPrice&#34;:&#34;0.000182012272586495&#34;},{&#34;uuid&#34;:&#34;65PHZTpmE55b&#34;,&#34;symbol&#34;:&#34;CRO&#34;,&#34;name&#34;:&#34;Cronos&#34;,&#34;color&#34;:&#34;#01275d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/2o91jm73M/cro.svg&#34;,&#34;marketCap&#34;:&#34;2144235617&#34;,&#34;price&#34;:&#34;0.10655742594393323&#34;,&#34;listedAt&#34;:1548953220,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.27&#34;,&#34;rank&#34;:30,&#34;sparkline&#34;:[&#34;0.10985914784930514&#34;,&#34;0.109682457024733&#34;,&#34;0.10956729891674144&#34;,&#34;0.10911207608346374&#34;,&#34;0.10902543638486992&#34;,&#34;0.10927808709067674&#34;,&#34;0.10943608134443347&#34;,&#34;0.10940911884108394&#34;,&#34;0.10924559748202932&#34;,&#34;0.10908157747944039&#34;,&#34;0.10911847921755868&#34;,&#34;0.10915241918285537&#34;,&#34;0.10886975486847157&#34;,&#34;0.10896755254564319&#34;,&#34;0.10904975001196715&#34;,&#34;0.10900635609398661&#34;,&#34;0.10884780012536031&#34;,&#34;0.10886974026288772&#34;,&#34;0.10842413085738475&#34;,&#34;0.10807209999342085&#34;,&#34;0.10753270529894514&#34;,&#34;0.10756052149956091&#34;,&#34;0.10719362836609835&#34;,&#34;0.10645518097879635&#34;,&#34;0.1064539188093031&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/65PHZTpmE55b+cronos-cro&#34;,&#34;24hVolume&#34;:&#34;50363712&#34;,&#34;btcPrice&#34;:&#34;0.000005481625595544&#34;},{&#34;uuid&#34;:&#34;AaQUAs2Mc&#34;,&#34;symbol&#34;:&#34;LUNC&#34;,&#34;name&#34;:&#34;Terra Classic&#34;,&#34;color&#34;:&#34;#0E3CA5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg&#34;,&#34;marketCap&#34;:&#34;1870743503&#34;,&#34;price&#34;:&#34;0.000283830339752311&#34;,&#34;listedAt&#34;:1565957940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.28&#34;,&#34;rank&#34;:31,&#34;sparkline&#34;:[&#34;0.000291408183017391&#34;,&#34;0.000292409487992499&#34;,&#34;0.000290253643011699&#34;,&#34;0.000285410189307339&#34;,&#34;0.000285065292117837&#34;,&#34;0.000286535793673872&#34;,&#34;0.000288916105597009&#34;,&#34;0.000289318178691781&#34;,&#34;0.000290670276438359&#34;,&#34;0.000291320250350914&#34;,&#34;0.000289809852004125&#34;,&#34;0.000289330187294165&#34;,&#34;0.000287152575580334&#34;,&#34;0.000294301676378236&#34;,&#34;0.000300796682791177&#34;,&#34;0.000297703962369108&#34;,&#34;0.000295606822305771&#34;,&#34;0.000295023911961613&#34;,&#34;0.000293434294564619&#34;,&#34;0.000291294864283289&#34;,&#34;0.000293423441097173&#34;,&#34;0.000293017171287146&#34;,&#34;0.000290465240853728&#34;,&#34;0.00028772253077975&#34;,&#34;0.000285957106790142&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc&#34;,&#34;24hVolume&#34;:&#34;102617379&#34;,&#34;btcPrice&#34;:&#34;1.460106268e-8&#34;},{&#34;uuid&#34;:&#34;08CsQa-Ov&#34;,&#34;symbol&#34;:&#34;WEMIX&#34;,&#34;name&#34;:&#34;WEMIX TOKEN&#34;,&#34;color&#34;:&#34;#9bdc70&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1N84MQsoO/7548.png&#34;,&#34;marketCap&#34;:&#34;1787511560&#34;,&#34;price&#34;:&#34;1.7875115603216336&#34;,&#34;listedAt&#34;:1638249982,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.10&#34;,&#34;rank&#34;:32,&#34;sparkline&#34;:[&#34;1.8031030166590818&#34;,&#34;1.8033499314764765&#34;,&#34;1.8092487844736265&#34;,&#34;1.8070009657930712&#34;,&#34;1.8069153990199869&#34;,&#34;1.815385032185374&#34;,&#34;1.8207243797753068&#34;,&#34;1.8222107464477264&#34;,&#34;1.830004108094833&#34;,&#34;1.827678009384226&#34;,&#34;1.8164549274342943&#34;,&#34;1.8125397259642955&#34;,&#34;1.8068254396337304&#34;,&#34;1.8085580823873926&#34;,&#34;1.8086181265770653&#34;,&#34;1.8073606104165687&#34;,&#34;1.8053384754715083&#34;,&#34;1.8064640717079168&#34;,&#34;1.8001861687669276&#34;,&#34;1.7816960945912734&#34;,&#34;1.7776789317154749&#34;,&#34;1.776164099759573&#34;,&#34;1.7804674744110278&#34;,&#34;1.7766242917563675&#34;,&#34;1.7845586071988917&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix&#34;,&#34;24hVolume&#34;:&#34;19323940&#34;,&#34;btcPrice&#34;:&#34;0.000091954821868026&#34;},{&#34;uuid&#34;:&#34;QQ0NCmjVq&#34;,&#34;symbol&#34;:&#34;FLOW&#34;,&#34;name&#34;:&#34;Flow&#34;,&#34;color&#34;:&#34;#9efad7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xh8X8QBss/flow.png&#34;,&#34;marketCap&#34;:&#34;1733994802&#34;,&#34;price&#34;:&#34;1.6734171029673317&#34;,&#34;listedAt&#34;:1614963736,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.06&#34;,&#34;rank&#34;:33,&#34;sparkline&#34;:[&#34;1.699274614407112&#34;,&#34;1.7030592384328078&#34;,&#34;1.705216613559741&#34;,&#34;1.6942495346743922&#34;,&#34;1.6923001099439337&#34;,&#34;1.6953145592950318&#34;,&#34;1.6880054671858291&#34;,&#34;1.6834085833096686&#34;,&#34;1.6899629143936339&#34;,&#34;1.688022559594133&#34;,&#34;1.683911723601843&#34;,&#34;1.684635372277079&#34;,&#34;1.6798254296319421&#34;,&#34;1.6851729279146894&#34;,&#34;1.6886457103837447&#34;,&#34;1.693623027797161&#34;,&#34;1.6878021758352235&#34;,&#34;1.689631828594867&#34;,&#34;1.6807677008374484&#34;,&#34;1.673424743470945&#34;,&#34;1.6757516858290147&#34;,&#34;1.6810385266730044&#34;,&#34;1.6801651505652755&#34;,&#34;1.6699448642426544&#34;,&#34;1.6741071534492151&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/QQ0NCmjVq+flow-flow&#34;,&#34;24hVolume&#34;:&#34;23009004&#34;,&#34;btcPrice&#34;:&#34;0.000086085469336255&#34;},{&#34;uuid&#34;:&#34;SbWqqTui-&#34;,&#34;symbol&#34;:&#34;ENS&#34;,&#34;name&#34;:&#34;EnergySwap&#34;,&#34;color&#34;:&#34;#ffda55&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png&#34;,&#34;marketCap&#34;:&#34;1693001559&#34;,&#34;price&#34;:&#34;16.930015587081243&#34;,&#34;listedAt&#34;:1626134763,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.94&#34;,&#34;rank&#34;:34,&#34;sparkline&#34;:[&#34;17.200407497449735&#34;,&#34;17.268268609287244&#34;,&#34;17.220066127560198&#34;,&#34;17.114855130573133&#34;,&#34;17.266621900101068&#34;,&#34;17.3139348426035&#34;,&#34;17.407002342835042&#34;,&#34;17.330522532173624&#34;,&#34;17.256005240282615&#34;,&#34;17.265750301533753&#34;,&#34;17.136730026387063&#34;,&#34;17.03410922329627&#34;,&#34;16.94371489390619&#34;,&#34;16.985327880112216&#34;,&#34;17.109834336880542&#34;,&#34;17.12665741573142&#34;,&#34;17.04117542687434&#34;,&#34;17.031736347615357&#34;,&#34;16.99339760581997&#34;,&#34;17.25291069658712&#34;,&#34;17.486217971782985&#34;,&#34;17.634200724045197&#34;,&#34;17.530487830034883&#34;,&#34;17.315574119971&#34;,&#34;17.099139667061092&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/SbWqqTui-+energyswap-ens&#34;,&#34;24hVolume&#34;:&#34;25933572&#34;,&#34;btcPrice&#34;:&#34;0.000871070474257025&#34;},{&#34;uuid&#34;:&#34;ymQub4fuB&#34;,&#34;symbol&#34;:&#34;FIL&#34;,&#34;name&#34;:&#34;Filecoin&#34;,&#34;color&#34;:&#34;#0090ff&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;1606173686&#34;,&#34;price&#34;:&#34;5.445751139487624&#34;,&#34;listedAt&#34;:1602839473,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.82&#34;,&#34;rank&#34;:35,&#34;sparkline&#34;:[&#34;5.538095572587101&#34;,&#34;5.542497927064253&#34;,&#34;5.54069170070962&#34;,&#34;5.497274023766609&#34;,&#34;5.49431614502429&#34;,&#34;5.49463004691801&#34;,&#34;5.507554935361567&#34;,&#34;5.506207702524478&#34;,&#34;5.525418178808532&#34;,&#34;5.522742006150027&#34;,&#34;5.515756285578983&#34;,&#34;5.510723443224974&#34;,&#34;5.490281610108804&#34;,&#34;5.505988168523015&#34;,&#34;5.507692724425675&#34;,&#34;5.505235110861771&#34;,&#34;5.504018254145679&#34;,&#34;5.504431009694232&#34;,&#34;5.472006568067991&#34;,&#34;5.44812439791336&#34;,&#34;5.458005859596316&#34;,&#34;5.460497730192518&#34;,&#34;5.443105517296916&#34;,&#34;5.430953037536358&#34;,&#34;5.43730936122005&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ymQub4fuB+filecoin-fil&#34;,&#34;24hVolume&#34;:&#34;160445324&#34;,&#34;btcPrice&#34;:&#34;0.00028014536357968&#34;},{&#34;uuid&#34;:&#34;aMNLwaUbY&#34;,&#34;symbol&#34;:&#34;ICP&#34;,&#34;name&#34;:&#34;Internet Computer (DFINITY)&#34;,&#34;color&#34;:&#34;#00042b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png&#34;,&#34;marketCap&#34;:&#34;1555683129&#34;,&#34;price&#34;:&#34;5.923689431263047&#34;,&#34;listedAt&#34;:1601555742,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.13&#34;,&#34;rank&#34;:36,&#34;sparkline&#34;:[&#34;6.042412159257349&#34;,&#34;6.0337365436362385&#34;,&#34;6.017127137069023&#34;,&#34;5.998478981332394&#34;,&#34;5.978287082344161&#34;,&#34;5.986296807030361&#34;,&#34;5.990880756552686&#34;,&#34;5.980392575989206&#34;,&#34;5.990005480197185&#34;,&#34;5.991004408506641&#34;,&#34;5.986370772327675&#34;,&#34;5.992095135712485&#34;,&#34;5.967957724659138&#34;,&#34;5.977294972674303&#34;,&#34;5.985874992842043&#34;,&#34;5.998168283738171&#34;,&#34;5.987159071874125&#34;,&#34;5.993337074156106&#34;,&#34;5.964144234457828&#34;,&#34;5.937493275957687&#34;,&#34;5.956628067865076&#34;,&#34;5.962367132873412&#34;,&#34;5.9371929176144285&#34;,&#34;5.918740241654741&#34;,&#34;5.9264811160845365&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp&#34;,&#34;24hVolume&#34;:&#34;40566689&#34;,&#34;btcPrice&#34;:&#34;0.00030473190693955&#34;},{&#34;uuid&#34;:&#34;FEbS54wxo4oIl&#34;,&#34;symbol&#34;:&#34;VET&#34;,&#34;name&#34;:&#34;VeChain&#34;,&#34;color&#34;:&#34;#4bc0fa&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg&#34;,&#34;marketCap&#34;:&#34;1539814771&#34;,&#34;price&#34;:&#34;0.023064674547875252&#34;,&#34;listedAt&#34;:1533427200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.32&#34;,&#34;rank&#34;:37,&#34;sparkline&#34;:[&#34;0.02357201951728692&#34;,&#34;0.023545953369744996&#34;,&#34;0.02352228305473127&#34;,&#34;0.023399225660006497&#34;,&#34;0.023380916454492008&#34;,&#34;0.023451863657945098&#34;,&#34;0.023474115818074646&#34;,&#34;0.02337714298708147&#34;,&#34;0.02345237517090757&#34;,&#34;0.02343635218030844&#34;,&#34;0.023378520001901548&#34;,&#34;0.023362746258070038&#34;,&#34;0.023235205573350036&#34;,&#34;0.023320933384248854&#34;,&#34;0.02339490969447055&#34;,&#34;0.023408068584903817&#34;,&#34;0.023331131922462528&#34;,&#34;0.023304748557537808&#34;,&#34;0.023181803877466402&#34;,&#34;0.02308693746911013&#34;,&#34;0.023197338277578194&#34;,&#34;0.023226845841969383&#34;,&#34;0.023112509578405112&#34;,&#34;0.02309929499850379&#34;,&#34;0.02312409817678699&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet&#34;,&#34;24hVolume&#34;:&#34;100645153&#34;,&#34;btcPrice&#34;:&#34;0.000001186514306577&#34;},{&#34;uuid&#34;:&#34;ncYFcP709&#34;,&#34;symbol&#34;:&#34;CAKE&#34;,&#34;name&#34;:&#34;PancakeSwap&#34;,&#34;color&#34;:&#34;#fe9555&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png&#34;,&#34;marketCap&#34;:&#34;1525469494&#34;,&#34;price&#34;:&#34;4.586703744597637&#34;,&#34;listedAt&#34;:1613642379,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.87&#34;,&#34;rank&#34;:38,&#34;sparkline&#34;:[&#34;4.721687032006943&#34;,&#34;4.70597901554926&#34;,&#34;4.658502993370856&#34;,&#34;4.594937884937383&#34;,&#34;4.608361617003116&#34;,&#34;4.624590509225183&#34;,&#34;4.623494139682886&#34;,&#34;4.625885642354607&#34;,&#34;4.643805683969291&#34;,&#34;4.64462115420541&#34;,&#34;4.650309786735201&#34;,&#34;4.642985648234068&#34;,&#34;4.627145197965803&#34;,&#34;4.630806473225821&#34;,&#34;4.628144774741532&#34;,&#34;4.620553926544924&#34;,&#34;4.60767561611019&#34;,&#34;4.6121035547909734&#34;,&#34;4.597365992921178&#34;,&#34;4.590943955503982&#34;,&#34;4.59513638615963&#34;,&#34;4.5999723212811245&#34;,&#34;4.595461836412426&#34;,&#34;4.589761626130853&#34;,&#34;4.592137949404105&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ncYFcP709+pancakeswap-cake&#34;,&#34;24hVolume&#34;:&#34;65745424&#34;,&#34;btcPrice&#34;:&#34;0.000235953453481438&#34;},{&#34;uuid&#34;:&#34;tEf7-dnwV3BXS&#34;,&#34;symbol&#34;:&#34;MANA&#34;,&#34;name&#34;:&#34;Decentraland&#34;,&#34;color&#34;:&#34;#f47e33&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg&#34;,&#34;marketCap&#34;:&#34;1515410553&#34;,&#34;price&#34;:&#34;0.69086482159658&#34;,&#34;listedAt&#34;:1500336000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.35&#34;,&#34;rank&#34;:39,&#34;sparkline&#34;:[&#34;0.700349810589536&#34;,&#34;0.70019912824114&#34;,&#34;0.6990546648756586&#34;,&#34;0.6952190718417646&#34;,&#34;0.6949590417037426&#34;,&#34;0.6958161554226494&#34;,&#34;0.6972692490668833&#34;,&#34;0.69721404067688&#34;,&#34;0.6987276774184841&#34;,&#34;0.6984363535498497&#34;,&#34;0.6970907692027304&#34;,&#34;0.6977517662736853&#34;,&#34;0.6955607933045&#34;,&#34;0.6965650989413158&#34;,&#34;0.6982175976675512&#34;,&#34;0.698134472620023&#34;,&#34;0.6964819682175925&#34;,&#34;0.6971264085880322&#34;,&#34;0.6924452812456992&#34;,&#34;0.6895900424045981&#34;,&#34;0.6912541930332825&#34;,&#34;0.6929202939599289&#34;,&#34;0.6910625106072574&#34;,&#34;0.6897565438244818&#34;,&#34;0.6904229720576964&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana&#34;,&#34;24hVolume&#34;:&#34;119823022&#34;,&#34;btcPrice&#34;:&#34;0.000035540106713138&#34;},{&#34;uuid&#34;:&#34;Z96jIvLU7&#34;,&#34;symbol&#34;:&#34;IMX&#34;,&#34;name&#34;:&#34;Immutable X&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/naRGT2Y_X/10603.png&#34;,&#34;marketCap&#34;:&#34;1471494427&#34;,&#34;price&#34;:&#34;0.7357472133330165&#34;,&#34;listedAt&#34;:1649387294,&#34;tier&#34;:1,&#34;change&#34;:&#34;-4.07&#34;,&#34;rank&#34;:40,&#34;sparkline&#34;:[&#34;0.7645658640414431&#34;,&#34;0.7649217255813134&#34;,&#34;0.7636863143865145&#34;,&#34;0.7591341456004859&#34;,&#34;0.7591586546984326&#34;,&#34;0.7618471232678597&#34;,&#34;0.7625296003884848&#34;,&#34;0.7603123432204528&#34;,&#34;0.7633305637667691&#34;,&#34;0.7630243971190316&#34;,&#34;0.7615972540038357&#34;,&#34;0.7618583983656054&#34;,&#34;0.7582385928923461&#34;,&#34;0.7591494945610591&#34;,&#34;0.7606291816587544&#34;,&#34;0.758706308867624&#34;,&#34;0.7559379139085033&#34;,&#34;0.7558310091871024&#34;,&#34;0.749305448770652&#34;,&#34;0.7443180205335761&#34;,&#34;0.745201229005567&#34;,&#34;0.7455992737314776&#34;,&#34;0.7416329132447247&#34;,&#34;0.7405829024180342&#34;,&#34;0.73931338333915&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Z96jIvLU7+immutablex-imx&#34;,&#34;24hVolume&#34;:&#34;55567717&#34;,&#34;btcPrice&#34;:&#34;0.000037848988193263&#34;},{&#34;uuid&#34;:&#34;jad286TjB&#34;,&#34;symbol&#34;:&#34;HBAR&#34;,&#34;name&#34;:&#34;Hedera&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/dSCnSLilQ/hedera.svg&#34;,&#34;marketCap&#34;:&#34;1451625866&#34;,&#34;price&#34;:&#34;0.059624940107278104&#34;,&#34;listedAt&#34;:1568704980,&#34;tier&#34;:1,&#34;change&#34;:&#34;2.67&#34;,&#34;rank&#34;:41,&#34;sparkline&#34;:[&#34;0.05798478874930647&#34;,&#34;0.057992054470763305&#34;,&#34;0.05811360460302942&#34;,&#34;0.058056104057388&#34;,&#34;0.05805335097370533&#34;,&#34;0.058079317622014355&#34;,&#34;0.057984774613655414&#34;,&#34;0.05785226425973457&#34;,&#34;0.058087590352603&#34;,&#34;0.05808854134718561&#34;,&#34;0.057977502476879855&#34;,&#34;0.058033150281271706&#34;,&#34;0.05799743267976434&#34;,&#34;0.05803601742968558&#34;,&#34;0.05835442091515181&#34;,&#34;0.05870356014421551&#34;,&#34;0.05879013488358791&#34;,&#34;0.05919952526734713&#34;,&#34;0.05881043378742242&#34;,&#34;0.05909042808207032&#34;,&#34;0.05911083210419919&#34;,&#34;0.05912513646950412&#34;,&#34;0.059413679008045055&#34;,&#34;0.0595535071116032&#34;,&#34;0.05953150274312856&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/jad286TjB+hedera-hbar&#34;,&#34;24hVolume&#34;:&#34;64365742&#34;,&#34;btcPrice&#34;:&#34;0.000003067281279831&#34;},{&#34;uuid&#34;:&#34;KfWtaeV1W&#34;,&#34;symbol&#34;:&#34;FRAX&#34;,&#34;name&#34;:&#34;Frax&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BpVNCX-NM/frax.png&#34;,&#34;marketCap&#34;:&#34;1356235719&#34;,&#34;price&#34;:&#34;0.9996881493884945&#34;,&#34;listedAt&#34;:1615299931,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.03&#34;,&#34;rank&#34;:42,&#34;sparkline&#34;:[&#34;0.999917920915348&#34;,&#34;1.0006774289212381&#34;,&#34;1.0019394325370312&#34;,&#34;1.0023256769109943&#34;,&#34;1.0018240468806094&#34;,&#34;1.0014107347307466&#34;,&#34;1.0011274381868767&#34;,&#34;0.9994409467898677&#34;,&#34;0.9994930120023573&#34;,&#34;0.9994846776787877&#34;,&#34;0.9997195749258415&#34;,&#34;0.9994696846867639&#34;,&#34;0.9996132823893206&#34;,&#34;0.9988926192056131&#34;,&#34;0.9989348828267943&#34;,&#34;0.9994095982798501&#34;,&#34;0.9993298268317684&#34;,&#34;0.999310110044257&#34;,&#34;1.000809152939218&#34;,&#34;0.9999475081630753&#34;,&#34;0.9990186039920171&#34;,&#34;0.9999583263344178&#34;,&#34;1.0004104538522938&#34;,&#34;0.9998534310671768&#34;,&#34;0.9992393800575986&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/KfWtaeV1W+frax-frax&#34;,&#34;24hVolume&#34;:&#34;7035837&#34;,&#34;btcPrice&#34;:&#34;0.000051412194091873&#34;},{&#34;uuid&#34;:&#34;bauj_21eYVwso&#34;,&#34;symbol&#34;:&#34;QNT&#34;,&#34;name&#34;:&#34;Quant&#34;,&#34;color&#34;:&#34;#585e63&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/a-i9Dl392/quant.png&#34;,&#34;marketCap&#34;:&#34;1346028572&#34;,&#34;price&#34;:&#34;137.6696411522649&#34;,&#34;listedAt&#34;:1533945600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.91&#34;,&#34;rank&#34;:43,&#34;sparkline&#34;:[&#34;138.38761558246293&#34;,&#34;138.04746101287446&#34;,&#34;138.05258138629117&#34;,&#34;137.64575846086782&#34;,&#34;137.70822155986875&#34;,&#34;138.06432241734313&#34;,&#34;137.58205525348535&#34;,&#34;137.9218992304029&#34;,&#34;138.83582445376285&#34;,&#34;138.3233797545626&#34;,&#34;137.8637232895789&#34;,&#34;138.31186279432129&#34;,&#34;138.03098887006283&#34;,&#34;137.99578569528546&#34;,&#34;137.67465331599809&#34;,&#34;137.827521654534&#34;,&#34;137.34852763435637&#34;,&#34;137.55783135898028&#34;,&#34;136.71837777068814&#34;,&#34;136.52286980557471&#34;,&#34;137.57060404116518&#34;,&#34;138.49214005482074&#34;,&#34;138.44834321344658&#34;,&#34;138.0607924800335&#34;,&#34;137.80709133031442&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/bauj_21eYVwso+quant-qnt&#34;,&#34;24hVolume&#34;:&#34;82584651&#34;,&#34;btcPrice&#34;:&#34;0.007082128927050823&#34;},{&#34;uuid&#34;:&#34;GSCt2y6YSgO26&#34;,&#34;symbol&#34;:&#34;CHZ&#34;,&#34;name&#34;:&#34;Chiliz&#34;,&#34;color&#34;:&#34;#d05e72&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/gTsOlSnwR/4066.png&#34;,&#34;marketCap&#34;:&#34;1299815589&#34;,&#34;price&#34;:&#34;0.2187920270504329&#34;,&#34;listedAt&#34;:1562332440,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.11&#34;,&#34;rank&#34;:44,&#34;sparkline&#34;:[&#34;0.21583320094099043&#34;,&#34;0.21610118106159043&#34;,&#34;0.2152922639567781&#34;,&#34;0.21388108308312676&#34;,&#34;0.21366568513911807&#34;,&#34;0.2146014376604286&#34;,&#34;0.21510012687721194&#34;,&#34;0.2141547147530393&#34;,&#34;0.21523295680181628&#34;,&#34;0.21568285113316482&#34;,&#34;0.2152961534670722&#34;,&#34;0.21480305478037348&#34;,&#34;0.21443358038170504&#34;,&#34;0.21687981002330944&#34;,&#34;0.2166869704013217&#34;,&#34;0.21771974953038728&#34;,&#34;0.218051140689329&#34;,&#34;0.2177869464642133&#34;,&#34;0.2160946455475329&#34;,&#34;0.2204332146494816&#34;,&#34;0.21916316874100783&#34;,&#34;0.21783344840920435&#34;,&#34;0.21543959521617692&#34;,&#34;0.217379277094254&#34;,&#34;0.2187892224790259&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz&#34;,&#34;24hVolume&#34;:&#34;267986259&#34;,&#34;btcPrice&#34;:&#34;0.000011255301683166&#34;},{&#34;uuid&#34;:&#34;omwkOTglq&#34;,&#34;symbol&#34;:&#34;EGLD&#34;,&#34;name&#34;:&#34;Elrond&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg&#34;,&#34;marketCap&#34;:&#34;1292339569&#34;,&#34;price&#34;:&#34;54.68672269753164&#34;,&#34;listedAt&#34;:1612524044,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.31&#34;,&#34;rank&#34;:45,&#34;sparkline&#34;:[&#34;54.9010104748951&#34;,&#34;55.04538160515345&#34;,&#34;55.419861688060394&#34;,&#34;55.16588102747337&#34;,&#34;55.48033454405994&#34;,&#34;55.14783619527797&#34;,&#34;55.15541403041966&#34;,&#34;55.336467780612764&#34;,&#34;55.31273517826168&#34;,&#34;55.34850129900803&#34;,&#34;55.368471042944805&#34;,&#34;55.58669413343356&#34;,&#34;55.68629616935519&#34;,&#34;55.9908967112611&#34;,&#34;56.03830700926984&#34;,&#34;56.05933462664912&#34;,&#34;55.742838866250835&#34;,&#34;55.67766698494972&#34;,&#34;55.430385507891714&#34;,&#34;55.014904299699424&#34;,&#34;54.900837088064186&#34;,&#34;55.30617962286372&#34;,&#34;54.869762608040595&#34;,&#34;54.59685224533007&#34;,&#34;54.60128931590051&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/omwkOTglq+elrond-egld&#34;,&#34;24hVolume&#34;:&#34;98216349&#34;,&#34;btcPrice&#34;:&#34;0.002813244935486083&#34;},{&#34;uuid&#34;:&#34;fsIbGOEJWbzxG&#34;,&#34;symbol&#34;:&#34;XTZ&#34;,&#34;name&#34;:&#34;Tezos&#34;,&#34;color&#34;:&#34;#2c7df7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HkLUdilQ7/xtz.svg&#34;,&#34;marketCap&#34;:&#34;1276543396&#34;,&#34;price&#34;:&#34;1.405596051010251&#34;,&#34;listedAt&#34;:1530662400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.84&#34;,&#34;rank&#34;:46,&#34;sparkline&#34;:[&#34;1.4313318032878788&#34;,&#34;1.4307497256938626&#34;,&#34;1.430824651608038&#34;,&#34;1.4313954986685833&#34;,&#34;1.4284997082759106&#34;,&#34;1.428714461171499&#34;,&#34;1.4322427807170737&#34;,&#34;1.4290212938132865&#34;,&#34;1.4286522233986765&#34;,&#34;1.4268693940468038&#34;,&#34;1.424028572308398&#34;,&#34;1.4229926177973575&#34;,&#34;1.415289761691851&#34;,&#34;1.4188058392555085&#34;,&#34;1.4225397427619473&#34;,&#34;1.4208138089013287&#34;,&#34;1.4192702721303507&#34;,&#34;1.4201414596795612&#34;,&#34;1.4115158444603828&#34;,&#34;1.40348093867165&#34;,&#34;1.4067728288011907&#34;,&#34;1.4096115086471093&#34;,&#34;1.402963922774156&#34;,&#34;1.399866303549963&#34;,&#34;1.402415467373878&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz&#34;,&#34;24hVolume&#34;:&#34;24959472&#34;,&#34;btcPrice&#34;:&#34;0.000072307971236724&#34;},{&#34;uuid&#34;:&#34;pxtKbG5rg&#34;,&#34;symbol&#34;:&#34;SAND&#34;,&#34;name&#34;:&#34;The Sandbox&#34;,&#34;color&#34;:&#34;#00adef&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/kd_vwOcnI/sandbox.png&#34;,&#34;marketCap&#34;:&#34;1250145657&#34;,&#34;price&#34;:&#34;0.8313961738770613&#34;,&#34;listedAt&#34;:1613583024,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.96&#34;,&#34;rank&#34;:47,&#34;sparkline&#34;:[&#34;0.8474944556856686&#34;,&#34;0.8478185328025288&#34;,&#34;0.8481859739055433&#34;,&#34;0.8430621693189192&#34;,&#34;0.8416941695071052&#34;,&#34;0.8422039127221858&#34;,&#34;0.8432053816481251&#34;,&#34;0.8425655473931818&#34;,&#34;0.8438012543115223&#34;,&#34;0.8443577230222298&#34;,&#34;0.8436594997117216&#34;,&#34;0.8430674241154689&#34;,&#34;0.840085342940651&#34;,&#34;0.8421379968905525&#34;,&#34;0.8439135569937402&#34;,&#34;0.8437222666690191&#34;,&#34;0.8416511712635965&#34;,&#34;0.843704978499379&#34;,&#34;0.8364604851908577&#34;,&#34;0.8315870687966074&#34;,&#34;0.8310116107014232&#34;,&#34;0.8336362660532851&#34;,&#34;0.8320319949700854&#34;,&#34;0.8308696191622152&#34;,&#34;0.8318815261011492&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand&#34;,&#34;24hVolume&#34;:&#34;85219506&#34;,&#34;btcPrice&#34;:&#34;0.000042769450429102&#34;},{&#34;uuid&#34;:&#34;Pe93bIOD2&#34;,&#34;symbol&#34;:&#34;LDO&#34;,&#34;name&#34;:&#34;Lido DAO Token&#34;,&#34;color&#34;:&#34;#77cced&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png&#34;,&#34;marketCap&#34;:&#34;1182471126&#34;,&#34;price&#34;:&#34;1.470145895622547&#34;,&#34;listedAt&#34;:1627361901,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.02&#34;,&#34;rank&#34;:48,&#34;sparkline&#34;:[&#34;1.5098873753909579&#34;,&#34;1.505502251794712&#34;,&#34;1.50762708706097&#34;,&#34;1.4867073112239915&#34;,&#34;1.4913657767865283&#34;,&#34;1.4973605272586614&#34;,&#34;1.4986035447126522&#34;,&#34;1.497775818019334&#34;,&#34;1.5023998779463243&#34;,&#34;1.4993312715061418&#34;,&#34;1.49060691136076&#34;,&#34;1.4926813803989087&#34;,&#34;1.4824707747532286&#34;,&#34;1.4883500695407104&#34;,&#34;1.4942273477704227&#34;,&#34;1.4989765304122389&#34;,&#34;1.4936671531167223&#34;,&#34;1.505425598425895&#34;,&#34;1.4818317692372263&#34;,&#34;1.4753124794517811&#34;,&#34;1.481637396672403&#34;,&#34;1.4890300817113942&#34;,&#34;1.480361687959013&#34;,&#34;1.4768576252403949&#34;,&#34;1.4757479148271815&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo&#34;,&#34;24hVolume&#34;:&#34;7525939&#34;,&#34;btcPrice&#34;:&#34;0.00007562860400615&#34;},{&#34;uuid&#34;:&#34;iAzbfXiBBKkR6&#34;,&#34;symbol&#34;:&#34;EOS&#34;,&#34;name&#34;:&#34;EOS&#34;,&#34;color&#34;:&#34;#443f54&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/PqOYrWSje/eos2.svg&#34;,&#34;marketCap&#34;:&#34;1119861854&#34;,&#34;price&#34;:&#34;1.1328727464243413&#34;,&#34;listedAt&#34;:1498694400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.50&#34;,&#34;rank&#34;:49,&#34;sparkline&#34;:[&#34;1.1707599261591077&#34;,&#34;1.1695433005648204&#34;,&#34;1.1705579615313646&#34;,&#34;1.1631301177520443&#34;,&#34;1.1569384107518168&#34;,&#34;1.157561535262188&#34;,&#34;1.162705243924079&#34;,&#34;1.1629178277112788&#34;,&#34;1.1646243568622496&#34;,&#34;1.164828387309472&#34;,&#34;1.1633514114886283&#34;,&#34;1.16241658361454&#34;,&#34;1.160039125026678&#34;,&#34;1.1618334612628334&#34;,&#34;1.1621937756053127&#34;,&#34;1.1644549774145145&#34;,&#34;1.1617600073811736&#34;,&#34;1.1623659155865154&#34;,&#34;1.1488686957721117&#34;,&#34;1.1419756946072381&#34;,&#34;1.1405209858041592&#34;,&#34;1.1403448848400015&#34;,&#34;1.1341212006204435&#34;,&#34;1.1301485482217544&#34;,&#34;1.134808236229755&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos&#34;,&#34;24hVolume&#34;:&#34;174439947&#34;,&#34;btcPrice&#34;:&#34;0.00005827828692635&#34;},{&#34;uuid&#34;:&#34;ixgUfzmLR&#34;,&#34;symbol&#34;:&#34;AAVE&#34;,&#34;name&#34;:&#34;Aave&#34;,&#34;color&#34;:&#34;#B6509E&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/4bpYKqV4X/AAVE.png&#34;,&#34;marketCap&#34;:&#34;1064877885&#34;,&#34;price&#34;:&#34;75.42640388569518&#34;,&#34;listedAt&#34;:1603447311,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.94&#34;,&#34;rank&#34;:50,&#34;sparkline&#34;:[&#34;78.26377642706312&#34;,&#34;78.33511318845336&#34;,&#34;78.20138481720991&#34;,&#34;77.72587740089071&#34;,&#34;77.50212897886952&#34;,&#34;77.71448752048596&#34;,&#34;78.0559709343131&#34;,&#34;77.82590081237397&#34;,&#34;77.68710469000877&#34;,&#34;77.5810505538391&#34;,&#34;77.31297779132427&#34;,&#34;77.38611661733124&#34;,&#34;77.13501214318536&#34;,&#34;77.31900574408121&#34;,&#34;77.7395264731319&#34;,&#34;77.54622545754826&#34;,&#34;77.24723191843394&#34;,&#34;77.25418064948364&#34;,&#34;76.73343731429884&#34;,&#34;76.41728708203318&#34;,&#34;76.60504418692754&#34;,&#34;76.52254294391791&#34;,&#34;75.928002885622&#34;,&#34;75.48148617744101&#34;,&#34;75.40698100720569&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ixgUfzmLR+aave-aave&#34;,&#34;24hVolume&#34;:&#34;76269476&#34;,&#34;btcPrice&#34;:&#34;0.00388015478468117&#34;}]}} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; API status: success BTC 19439.019335898196 Icon Url: https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg Rank Url: https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc ETH 1324.072445926556 Icon Url: https://cdn.coinranking.com/rk4RKHOuW/eth.svg Rank Url: https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth USDT 1.0001214527505147 Icon Url: https://cdn.coinranking.com/mgHqwlCLj/usdt.svg Rank Url: https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt USDC 0.9999876451850763 Icon Url: https://cdn.coinranking.com/jkDf8sQbY/usdc.svg Rank Url: https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc BNB 281.8012429000166 Icon Url: https://cdn.coinranking.com/B1N19L_dZ/bnb.svg Rank Url: https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb XRP 0.5151501151751078 Icon Url: https://cdn.coinranking.com/B1oPuTyfX/xrp.svg Rank Url: https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp BUSD 1.0001753926712795 Icon Url: https://cdn.coinranking.com/6SJHRfClq/busd.svg Rank Url: https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd ADA 0.42440967570784466 Icon Url: https://cdn.coinranking.com/ryY28nXhW/ada.svg Rank Url: https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada SOL 32.874319732515566 Icon Url: https://cdn.coinranking.com/yvUG4Qex5/solana.svg Rank Url: https://coinranking.com/coin/zNZHO_Sjf+solana-sol DOGE 0.061769249278769194 Icon Url: https://cdn.coinranking.com/H1arXIuOZ/doge.svg Rank Url: https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge DOT 6.302268837898188 Icon Url: https://cdn.coinranking.com/RsljYqnbu/polkadot.svg Rank Url: https://coinranking.com/coin/25W7FG7om+polkadot-dot MATIC 0.8272795130492796 Icon Url: https://cdn.coinranking.com/WulYRq14o/polygon.png Rank Url: https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic SHIB 0.000010993463080138 Icon Url: https://cdn.coinranking.com/D69LfI-tm/shib.png Rank Url: https://coinranking.com/coin/xz24e0BjL+shibainu-shib DAI 1.0000693628240345 Icon Url: https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg Rank Url: https://coinranking.com/coin/MoTuySvg7+dai-dai TRX 0.06248121489307172 Icon Url: https://cdn.coinranking.com/behejNqQs/trx.svg Rank Url: https://coinranking.com/coin/qUhEFk1I61atv+tron-trx WETH 1323.3960500594292 Icon Url: https://cdn.coinranking.com/KIviQyZlt/weth.svg Rank Url: https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth UNI 6.743055901991712 Icon Url: https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48 Rank Url: https://coinranking.com/coin/_H5FVG9iW+uniswap-uni AVAX 16.80589106314172 Icon Url: https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png Rank Url: https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax ATOM 12.82359764347695 Icon Url: https://cdn.coinranking.com/HJzHboruM/atom.svg Rank Url: https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom OKB 15.563113364428492 Icon Url: https://cdn.coinranking.com/xcZdYtX6E/okx.png Rank Url: https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb LTC 52.60065314650705 Icon Url: https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg Rank Url: https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc FTT 24.346629216418222 Icon Url: https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg Rank Url: https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt ETC 27.397476607187254 Icon Url: https://cdn.coinranking.com/rJfyor__W/etc.svg Rank Url: https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc XMR 144.75053086208075 Icon Url: https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg Rank Url: https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr XLM 0.1216904598872746 Icon Url: https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg Rank Url: https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm ALGO 0.33683275912004623 Icon Url: https://cdn.coinranking.com/lzbmCkUGB/algo.svg Rank Url: https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo BTCB 19881.29798080624 Icon Url: https://cdn.coinranking.com/Swr_SeZio/4023.png Rank Url: https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb BCH 116.52757341656209 Icon Url: https://cdn.coinranking.com/By8ziihX7/bch.svg Rank Url: https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch NEAR 3.5381400861796455 Icon Url: https://cdn.coinranking.com/Cth83dCnl/near.png Rank Url: https://coinranking.com/coin/DCrsaMv68+nearprotocol-near CRO 0.10655742594393323 Icon Url: https://cdn.coinranking.com/2o91jm73M/cro.svg Rank Url: https://coinranking.com/coin/65PHZTpmE55b+cronos-cro LUNC 0.000283830339752311 Icon Url: https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg Rank Url: https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc WEMIX 1.7875115603216336 Icon Url: https://cdn.coinranking.com/1N84MQsoO/7548.png Rank Url: https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix FLOW 1.6734171029673317 Icon Url: https://cdn.coinranking.com/xh8X8QBss/flow.png Rank Url: https://coinranking.com/coin/QQ0NCmjVq+flow-flow ENS 16.930015587081243 Icon Url: https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png Rank Url: https://coinranking.com/coin/SbWqqTui-+energyswap-ens FIL 5.445751139487624 Icon Url: https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48 Rank Url: https://coinranking.com/coin/ymQub4fuB+filecoin-fil ICP 5.923689431263047 Icon Url: https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png Rank Url: https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp VET 0.023064674547875252 Icon Url: https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg Rank Url: https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet CAKE 4.586703744597637 Icon Url: https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png Rank Url: https://coinranking.com/coin/ncYFcP709+pancakeswap-cake MANA 0.69086482159658 Icon Url: https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg Rank Url: https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana IMX 0.7357472133330165 Icon Url: https://cdn.coinranking.com/naRGT2Y_X/10603.png Rank Url: https://coinranking.com/coin/Z96jIvLU7+immutablex-imx HBAR 0.059624940107278104 Icon Url: https://cdn.coinranking.com/dSCnSLilQ/hedera.svg Rank Url: https://coinranking.com/coin/jad286TjB+hedera-hbar FRAX 0.9996881493884945 Icon Url: https://cdn.coinranking.com/BpVNCX-NM/frax.png Rank Url: https://coinranking.com/coin/KfWtaeV1W+frax-frax QNT 137.6696411522649 Icon Url: https://cdn.coinranking.com/a-i9Dl392/quant.png Rank Url: https://coinranking.com/coin/bauj_21eYVwso+quant-qnt CHZ 0.2187920270504329 Icon Url: https://cdn.coinranking.com/gTsOlSnwR/4066.png Rank Url: https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz EGLD 54.68672269753164 Icon Url: https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg Rank Url: https://coinranking.com/coin/omwkOTglq+elrond-egld XTZ 1.405596051010251 Icon Url: https://cdn.coinranking.com/HkLUdilQ7/xtz.svg Rank Url: https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz SAND 0.8313961738770613 Icon Url: https://cdn.coinranking.com/kd_vwOcnI/sandbox.png Rank Url: https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand LDO 1.470145895622547 Icon Url: https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png Rank Url: https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo EOS 1.1328727464243413 Icon Url: https://cdn.coinranking.com/PqOYrWSje/eos2.svg Rank Url: https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos AAVE 75.42640388569518 Icon Url: https://cdn.coinranking.com/4bpYKqV4X/AAVE.png Rank Url: https://coinranking.com/coin/ixgUfzmLR+aave-aave . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. . Below is my own api program with Netflix top 10 movies . import requests url = &quot;https://netflix-weekly-top-10.p.rapidapi.com/api/othermovie&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;cf94bdc878msh0d7a71de5a787e6p184ceejsnf6177235d280&quot;, &#39;x-rapidapi-host&#39;: &quot;netflix-weekly-top-10.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.text) # This code looks for ATHENA in &quot;name&quot; print(&quot;Movie Totals&quot;) movies = response.json() for key, value in movies: #.items(): # this finds key, value pairs in country print(key, value) for movie in movies: # movies is a list if movie[&quot;ATHENA&quot;] == &quot;Plan A Plan B&quot;: # this filters for USA for key, value in movie.items(): # this finds key, value pairs in country print(key, value) . [{&#34;list&#34;:&#34;1&#34;,&#34;name&#34;:&#34;ATHENA&#34;,&#34;hoursviewed&#34;:&#34;13,600,000&#34;},{&#34;list&#34;:&#34;2&#34;,&#34;name&#34;:&#34;The Perfumier&#34;,&#34;hoursviewed&#34;:&#34;4,500,000&#34;},{&#34;list&#34;:&#34;3&#34;,&#34;name&#34;:&#34;Fullmetal Alchemist The Final Alchemy&#34;,&#34;hoursviewed&#34;:&#34;4,460,000&#34;},{&#34;list&#34;:&#34;4&#34;,&#34;name&#34;:&#34;Plan A Plan B&#34;,&#34;hoursviewed&#34;:&#34;3,920,000&#34;},{&#34;list&#34;:&#34;5&#34;,&#34;name&#34;:&#34;Aníkúlápó&#34;,&#34;hoursviewed&#34;:&#34;2,680,000&#34;},{&#34;list&#34;:&#34;6&#34;,&#34;name&#34;:&#34;No Limit&#34;,&#34;hoursviewed&#34;:&#34;2,220,000&#34;},{&#34;list&#34;:&#34;7&#34;,&#34;name&#34;:&#34;El Jeremías&#34;,&#34;hoursviewed&#34;:&#34;2,210,000&#34;},{&#34;list&#34;:&#34;8&#34;,&#34;name&#34;:&#34;Loving Adults&#34;,&#34;hoursviewed&#34;:&#34;2,160,000&#34;},{&#34;list&#34;:&#34;9&#34;,&#34;name&#34;:&#34;Drifting Home&#34;,&#34;hoursviewed&#34;:&#34;1,720,000&#34;},{&#34;list&#34;:&#34;10&#34;,&#34;name&#34;:&#34;RRR (Hindi)&#34;,&#34;hoursviewed&#34;:&#34;1,190,000&#34;}] Movie Totals . ValueError Traceback (most recent call last) /home/jiya_sav/vscode/jiya_repository/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb Cell 12 in &lt;cell line: 15&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/jiya_sav/vscode/jiya_repository/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; print(&#34;Movie Totals&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/jiya_sav/vscode/jiya_repository/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; movies = response.json() &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/jiya_sav/vscode/jiya_repository/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; for key, value in movies: #.items(): # this finds key, value pairs in country &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/jiya_sav/vscode/jiya_repository/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; print(key, value) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/jiya_sav/vscode/jiya_repository/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; for movie in movies: # movies is a list ValueError: too many values to unpack (expected 2) . import requests url = &quot;https://joke-generator.p.rapidapi.com/generate-joke&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;cf94bdc878msh0d7a71de5a787e6p184ceejsnf6177235d280&quot;, &quot;X-RapidAPI-Host&quot;: &quot;joke-generator.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.text) . {&#34;title&#34;:&#34;Cats Are Smarter&#34;,&#34;content&#34;:&#34; n t t t t t t tCats are smarter than dogs. You can&#39;t get eight cats to pull a sled through snow. n n—Jeff Valdez t t t t t t&#34;,&#34;category&#34;:&#34;dog&#34;} .",
            "url": "https://jiya-sav.github.io/jiya_repository/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter j is the 10 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 0 # Rest count at beginning of for loop and not inside it for i in alphabetList: #count = 0 ## Move this line outside the for loop to avoid resetting the count on each iteration if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count + 1) + &quot; letter in the alphabet&quot;) count += 1 # add +1 to str to output human counting rather than starting at 0 like computers . The letter j is the 10 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 # start at 1 to output odd numbers while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): # percent symbol is remainder evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: # else if statement; avoids repeats newNumbers.append(numbers[i]) print(newNumbers) # use del command to delete 0, then print del newNumbers[0] print(&quot;list after removing 0: &quot;, newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] list after removing 0: [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 0 . menu = {&quot;burger&quot;: 4.99, &quot;fries&quot;: 1.99, &quot;onion rings&quot;: 2.50, &quot;salad&quot;: 3.00, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #code should prompts the user multiple times, until they type &quot;Done&quot; while True: item = input(&quot;Please select an item from the menu, or type Done&quot;) if item == &quot;Done&quot; : break elif item in menu: total += menu[item] else: print (&quot;Invalid item!!!&quot;) #code adds price of the menu items selected by the user print(&quot;Your total bill is: $&quot; + str(total)) . Menu burger $4.99 fries $1.99 onion rings $2.5 salad $3.0 drink $0.99 Invalid item!!! Invalid item!!! Invalid item!!! Your total bill is: $19.959999999999997 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://jiya-sav.github.io/jiya_repository/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "College Board MCQs",
            "content": "Below are some notes about the practice MCs assigned week 6 . . Program Function and Purpose Quiz: On the nested loop question, I was debating between the answer that said the program compared each element to the one before it on the list, or the answer choice that said the program compared the elements to the ones after. The actual answer was that the loop compares each element . Week 7 MCs: . .",
            "url": "https://jiya-sav.github.io/jiya_repository/week%206/2022/10/02/mcproof.html",
            "relUrl": "/week%206/2022/10/02/mcproof.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Below is a demo of a js calculator",
            "content": "function myScript(){ var myScript=&quot;&lt;script&gt;&quot; ; myScript += &quot;function display(val) {&quot; ; myScript += &quot;document.getElementById(&#39;textval&#39;).value += val&quot; ; myScript += &quot; }&quot;; myScript += &quot; function eval1() {&quot;; myScript += &quot; let x = document.getElementById(&#39;textval&#39;).value&quot;; myScript += &quot; let y = eval(x)&quot;; myScript += &quot; document.getElementById(&#39;textval&#39;).value = y&quot;; myScript += &quot;}&quot;; myScript += &quot;function clr() {&quot;; myScript += &quot;document.getElementById(&#39;textval&#39;).value = &#39;&#39;&quot;; myScript += &quot;}&quot;; myScript += &quot;&lt;/script&gt;&quot;; return &quot;&lt;script&gt;&quot; + myScript + &quot;&lt;/script&gt;&quot; ; } // defining our calculator function function myCalc() { // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; var script=myScript(); // making a header body += &quot;&lt;p&gt;Calculator&lt;/p&gt;&quot;; body += &quot;&lt;div&gt;A JS Calculator&lt;/div&gt;&quot;; body += &quot;&lt;table border=&#39;1&#39;&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;c&#39; onclick=&#39;clr()&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td colspan=&#39;3&#39;&gt;&lt;input type=&#39;text&#39; style=&#39;background-color:blue;color: white;&#39; id=&#39;textval&#39; /&gt;&lt;/td&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;+&#39; onclick=&#39;display(&#39;+&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;1&#39; onclick=&#39;display(&#39;1&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;2&#39; onclick=&#39;display(&#39;2&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;3&#39; onclick=&#39;display(&#39;3&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;-&#39; onclick=&#39;display(&#39;-&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;4&#39; onclick=&#39;display(&#39;4&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;5&#39; onclick=&#39;display(&#39;5&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;6&#39; onclick=&#39;display(&#39;6&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;*&#39; onclick=&#39;display(&#39;*&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;7&#39; onclick=&#39;display(&#39;7&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;8&#39; onclick=&#39;display(&#39;8&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;9&#39; onclick=&#39;display(&#39;9&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;/&#39; onclick=&#39;display(&#39;/&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;.&#39; onclick=&#39;display(&#39;.&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;0&#39; onclick=&#39;display(&#39;0&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;=&#39; onclick=&#39;eval1()&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; body += &quot;&lt;/table&gt;&quot;; // Build and HTML fragment of div, table, table body return ( &quot;&lt;script&gt;&quot; + script + &quot;&lt;/script&gt;&quot; + &quot;&lt;div&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; $$.html(myCalc()); . &lt;/script&gt;&lt;/script&gt;Calculator . A JS Calculator | | . &lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;+&#39; onclick=&#39;display(&#39;+&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;1&#39; onclick=&#39;display(&#39;1&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;2&#39; onclick=&#39;display(&#39;2&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;3&#39; onclick=&#39;display(&#39;3&#39;)&#39; /&gt; | . &lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;-&#39; onclick=&#39;display(&#39;-&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;4&#39; onclick=&#39;display(&#39;4&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;5&#39; onclick=&#39;display(&#39;5&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;6&#39; onclick=&#39;display(&#39;6&#39;)&#39; /&gt; | . &lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;*&#39; onclick=&#39;display(&#39;*&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;7&#39; onclick=&#39;display(&#39;7&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;8&#39; onclick=&#39;display(&#39;8&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;9&#39; onclick=&#39;display(&#39;9&#39;)&#39; /&gt; | . &lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;/&#39; onclick=&#39;display(&#39;/&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;.&#39; onclick=&#39;display(&#39;.&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; style=&#39;background-color:red;color: white;&#39; value=&#39;0&#39; onclick=&#39;display(&#39;0&#39;)&#39; /&gt; | | .",
            "url": "https://jiya-sav.github.io/jiya_repository/week%205/2022/09/25/JSPractice.html",
            "relUrl": "/week%205/2022/09/25/JSPractice.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "App Lab Code Explained",
            "content": "Below is my code for the quiz. Comments are in green. . setScreen(&quot;FirstScreen&quot;); var score = 0; onEvent(&quot;bluebutton&quot;, &quot;click&quot;, function( ) { setScreen(&quot;blue_screen&quot;); }); onEvent(&quot;takemeonvaca&quot;, &quot;click&quot;, function( ) { setScreen(&quot;vacationscreen&quot;); }); onEvent(&quot;rightpathchoice&quot;, &quot;click&quot;, function( ) { setText(&quot;rightpathchoice&quot;, &quot;Sorry, you are under the illusion of choice.&quot;); }); onEvent(&quot;leftpathchoice&quot;, &quot;click&quot;, function( ) { setScreen(&quot;bq1_screen&quot;); }); onEvent(&quot;mexicoflag&quot;, &quot;click&quot;, function( ) { score = score + 1; console.log(&quot;score&quot;); setScreen(&quot;bq1_correctchoice&quot;); }); onEvent(&quot;otherflag1&quot;, &quot;click&quot;, function( ) { setScreen(&quot;bq1_wrongchoice&quot;); }); onEvent(&quot;otherflag2&quot;, &quot;click&quot;, function( ) { setScreen(&quot;bq1_wrongchoice&quot;); }); onEvent(&quot;otherflag3&quot;, &quot;click&quot;, function( ) { setScreen(&quot;bq1_wrongchoice&quot;); }); console.log(&quot;bq1 is complete&quot;); onEvent(&quot;bq2_transport1&quot;, &quot;click&quot;, function( ) { setScreen(&quot;bq2_screen&quot;); }); onEvent(&quot;bq2_transport2&quot;, &quot;click&quot;, function( ) { setScreen(&quot;bq2_screen&quot;); }); onEvent(&quot;citycorrect&quot;, &quot;click&quot;, function( ) { score = score + 1; setScreen(&quot;bq2_correctchoice&quot;); }); onEvent(&quot;citywrong1&quot;, &quot;click&quot;, function( ) { setScreen(&quot;bq2_wrongchoice&quot;); }); onEvent(&quot;citywrong2&quot;, &quot;click&quot;, function( ) { setScreen(&quot;bq2_wrongchoice&quot;); }); onEvent(&quot;citywrong3&quot;, &quot;click&quot;, function( ) { setScreen(&quot;bq2_wrongchoice&quot;); }); console.log(&quot;bq2 is complete&quot;); onEvent(&quot;bq3transport1&quot;, &quot;click&quot;, function( ) { setScreen(&quot;bq3_screen&quot;); }); onEvent(&quot;bq3_transport2&quot;, &quot;click&quot;, function( ) { setScreen(&quot;bq3_screen&quot;); }); onEvent(&quot;bq3_correct&quot;, &quot;click&quot;, function( ) { score = score + 1; setScreen(&quot;bq3_correctchoicescr&quot;); }); onEvent(&quot;bq3_wrong1&quot;, &quot;click&quot;, function( ) { setScreen(&quot;bq3_wrongchoice&quot;); }); onEvent(&quot;bq3_wrong2&quot;, &quot;click&quot;, function( ) { setScreen(&quot;bq3_wrongchoice&quot;); }); onEvent(&quot;bq3_wrong3&quot;, &quot;click&quot;, function( ) { setScreen(&quot;bq3_wrongchoice&quot;); }); console.log(&quot;bq3 done&quot;); onEvent(&quot;bqend_transport1&quot;, &quot;click&quot;, function( ) { setScreen(&quot;blue_endscreen&quot;); }); onEvent(&quot;bqend_transport2&quot;, &quot;click&quot;, function( ) { setScreen(&quot;blue_endscreen&quot;); }); onEvent(&quot;score&quot;, &quot;click&quot;, function( ) { setText(&quot;score&quot;, score + &quot;/3&quot;); }); onEvent(&quot;redscreen_transport&quot;, &quot;click&quot;, function( ) { setScreen(&quot;red_screen&quot;); }); //now we are done with the blue choice path; transport to red onEvent(&quot;red_button&quot;, &quot;click&quot;, function( ) { setScreen(&quot;red_screen&quot;); }); onEvent(&quot;drawing_transport&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen1&quot;); console.log(&quot;setting screen 1&quot;); penRGB(120, 180, 200); show(); penDown(); moveForward(100); }); // below is the sequence for drawing game // below is the sequence for drawing game //change thickness show(); var penwidth = 3; onEvent(&quot;penwid&quot;, &quot;click&quot;, function( ) { show(); moveTo(0, 0); penwidth = prompt(&quot;Enter value 1, 3, or 5 for pen width.&quot;); }); if (penwidth===1) { penWidth(1); } if (penwidth===3) { penWidth(3); } if (penwidth===5) { penWidth(5); } // move the turtle to the x position specificied. onEvent(&quot;xSlider&quot;, &quot;input&quot;, function(event) { console.log(&quot;xSlider&quot;); console.log(penwidth); console.log(&quot;message&quot;); moveTo(getNumber(&quot;xSlider&quot;), getY()); }); // Whenever the value of the y-slider is being updated, // move the turtle to the y position specificied. onEvent(&quot;ySlider&quot;, &quot;input&quot;, function(event) { moveTo(getX(), getNumber(&quot;ySlider&quot;)); }); penRGB(120, 180, 200); //changing pen color onEvent(&quot;blue&quot;, &quot;click&quot;, function( ) { penColor(rgb(0, 89, 255)); }); onEvent(&quot;pink&quot;, &quot;click&quot;, function( ) { penColor(rgb(253, 0, 255)); }); onEvent(&quot;yellow&quot;, &quot;click&quot;, function( ) { penColor(rgb(255, 181, 0)); }); onEvent(&quot;green&quot;, &quot;click&quot;, function( ) { penColor(rgb(71, 151, 81)); }); //adding sound onEvent(&quot;bqend_transport1&quot;, &quot;click&quot;, function( ) { playSound(&quot;sound://category_human/character_kimberly_game_over_1.mp3&quot;, false); }); onEvent(&quot;bqend_transport2&quot;, &quot;click&quot;, function( ) { playSound(&quot;sound://category_human/character_kimberly_game_over_1.mp3&quot;, false); }); .",
            "url": "https://jiya-sav.github.io/jiya_repository/jupyter/week3/2022/09/12/AppLabcode_explained.html",
            "relUrl": "/jupyter/week3/2022/09/12/AppLabcode_explained.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Quiz Stored in dictionary",
            "content": "question_and_answer = [] question_and_answer.append({ &quot;Question&quot;: &quot;What is the shape of the earth?&quot;, &quot;Answer&quot;: &quot;sphere&quot; }) question_and_answer.append({ &quot;Question&quot;: &quot;What is the innermost layer of earth?&quot;, &quot;Answer&quot;: &quot;core&quot; }) question_and_answer.append({ &quot;Question&quot;: &quot;Is global warming bad?&quot;, &quot;Answer&quot;: &quot;yes&quot; }) totalquestions = len(question_and_answer) print(&quot;This is a quiz with a total of &quot; + str(totalquestions) + &quot; questions.&quot;) score = 0 for record in question_and_answer: msg = input(record[&quot;Question&quot;]) if (msg == record[&quot;Answer&quot;]): print (&quot;You are correct!&quot;) score = score + 1 else: print (&quot;Wrong. The correct answer is: &quot; + record[&quot;Answer&quot;]) print(&quot;Your total score is:&quot; + str(score) + &quot; out of &quot; + str(totalquestions)) . This is a quiz with a total of 3 questions. You are correct! Wrong. The correct answer is: core Wrong. The correct answer is: yes Your total score is:1 out of 3 .",
            "url": "https://jiya-sav.github.io/jiya_repository/week%202/2022/09/05/week2_ListQuiz.html",
            "relUrl": "/week%202/2022/09/05/week2_ListQuiz.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Jiya's Quizzes",
            "content": "Below are the required questions about AP CSP vocab . import getpass, sys def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) question_and_answer(&quot;Name the Python output command mentioned in this lesson?&quot;) question_and_answer(&quot;If you see many lines of code in order, what would College Board call it?&quot;) question_and_answer(&quot;Describe a keyword used in Python to define a function?&quot;) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Question: Name the Python output command mentioned in this lesson? Answer: rsp Question: If you see many lines of code in order, what would College Board call it? Answer: text Question: Describe a keyword used in Python to define a function? Answer: def Hello, jiya_sav running /bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Answer: no Question: What command is used to include other functions that were previously developed? if is incorrect! Question: What command is used to evaluate correct or incorrect response in this example? then is incorrect! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! jiya_sav you scored 1/3 . Below are questions about my fastpages site . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions about my blog.&quot;) question_and_answer(&quot;Are you ready?&quot;) rsp = question_with_response(&quot;Are sunflowers included in the flowers post?&quot;) if rsp == &quot;yes&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;In the sample AP Physics lab post, what is the calculated density?&quot;) if rsp == &quot;0.815&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What instrument do I like to play?&quot;) if rsp == &quot;piano&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, jiya_sav running /bin/python3 You will be asked 3 questions about my blog. Question: Are you ready? Answer: no Question: Are sunflowers included in the flowers post? yes is correct! Question: In the sample AP Physics lab post, what is the calculated density? 0.18 is incorrect! Question: What instrument do I like to play? piano is correct! jiya_sav you scored 2/3 .",
            "url": "https://jiya-sav.github.io/jiya_repository/fastpages/jupyter/week%201/2022/09/05/myquiz.html",
            "relUrl": "/fastpages/jupyter/week%201/2022/09/05/myquiz.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Jiya's Custom Lists, Dictionaries, Iteration",
            "content": "Fav_Fruit_Dictionary = [] Fav_Fruit_Dictionary.append({ &quot;FirstName&quot;: &quot;Arya&quot;, &quot;Fav_Fruits&quot;: [&quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;, &quot;Jackfruit&quot;, &quot;Watermelon&quot;] }) Fav_Fruit_Dictionary.append({ &quot;FirstName&quot;: &quot;Jiya&quot;, &quot;Fav_Fruits&quot;: [&quot;Orange&quot;, &quot;Lemon&quot;] }) # add one more entry based on input from user # ask user first name of friend and friend&#39;s fav fruits friend_name = input(&quot;What is your friend&#39;s first name?&quot;) friend_fruit_count = int(input(&quot;How many favorite fruits does &quot; + friend_name + &quot; have?&quot;)) # make temporary list to hold fruit values from input fruit_dictionary = [] for i in range(0, friend_fruit_count): fruit = str(input(&quot;What is your friend&#39;s favorite fruit # &quot; + str(i + 1) + &quot;:&quot;)) fruit_dictionary.append(fruit) # now we will append the friend&#39;s name and fruit list to the main dictionary Fav_Fruit_Dictionary.append ({ &quot;FirstName&quot;: friend_name, &quot;Fav_Fruits&quot;: fruit_dictionary }) # The list is printed def print_data(printfruit): print(printfruit[&quot;FirstName&quot;] + &quot;&#39;s &quot; + &quot;favorite fruits are &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(printfruit[&quot;Fav_Fruits&quot;])) print() def for_loop(): print(&quot;For loop output n&quot;) for record in Fav_Fruit_Dictionary: print_data(record) for_loop() . For loop output Arya&#39;s favorite fruits are Orange, Apple, Mango, Jackfruit, Watermelon Jiya&#39;s favorite fruits are Orange, Lemon piyush&#39;s favorite fruits are mango, pineapple . There are other methods besides append that can be used on lists. Below, I have demonstrated how to reverse the order and remove items. . print(&quot;Printing the same dictionary in reverse order:&quot;) for record in reversed(Fav_Fruit_Dictionary): print_data(record) # Removing the second record in the dictionary print(&quot;Printing the same list, with Jiya&#39;s record removed:&quot;) del Fav_Fruit_Dictionary[1] for record in Fav_Fruit_Dictionary: print_data(record) . Printing the same dictionary in reverse order: piyush&#39;s favorite fruits are mango, pineapple Jiya&#39;s favorite fruits are Orange, Lemon Arya&#39;s favorite fruits are Orange, Apple, Mango, Jackfruit, Watermelon Printing the same list, with Jiya&#39;s record removed: Arya&#39;s favorite fruits are Orange, Apple, Mango, Jackfruit, Watermelon piyush&#39;s favorite fruits are mango, pineapple . Now, I explore other type of loops, like while . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(Fav_Fruit_Dictionary): record = Fav_Fruit_Dictionary[i] print_data(record) i += 1 return while_loop() . While loop output Arya&#39;s favorite fruits are Orange, Apple, Mango, Jackfruit, Watermelon piyush&#39;s favorite fruits are mango, pineapple .",
            "url": "https://jiya-sav.github.io/jiya_repository/week%202/2022/09/05/myPythonLists.html",
            "relUrl": "/week%202/2022/09/05/myPythonLists.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "JavaScript Tutorial",
            "content": "console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, World!&quot;); . Hello, World! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); // define msg as a variable first, or put message in quotes . Hello, World! . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); // string message logIt(2022) // number . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf, classLevel) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.classLevel = classLevel; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role, classLevel: this.classLevel}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977, &quot;master&quot;); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, classLevel: &#39;master&#39;, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022, &quot;CSA&quot;), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023, &quot;CSA&quot;), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023, &quot;CSA&quot;), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023, &quot;CSA&quot;), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023, &quot;CSA&quot;), new Person(&quot;Vidhi&quot;, &quot;unknown&quot;, 2024, &quot;CSA&quot;), // adding my group members new Person(&quot;Jiya&quot;, &quot;jiya-sav&quot;, 2023, &quot;CSP&quot;), new Person(&quot;Shreya&quot;, &quot;rey444&quot;, 2023, &quot;CSP&quot;), new Person(&quot;Noor&quot;, &quot;Nope1013&quot;, 2023, &quot;CSP&quot;), new Person(&quot;Sanika&quot;, &quot;sanikasha&quot;, 2023, &quot;CSP&quot;) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, classLevel: &#39;master&#39;, role: &#39;Teacher&#39; }, Person { name: &#39;Anthony&#39;, ghID: &#39;tonyhieu&#39;, classOf: 2022, classLevel: &#39;CSA&#39;, role: &#39;Student&#39; }, Person { name: &#39;Bria&#39;, ghID: &#39;B-G101&#39;, classOf: 2023, classLevel: &#39;CSA&#39;, role: &#39;Student&#39; }, Person { name: &#39;Allie&#39;, ghID: &#39;xiaoa0&#39;, classOf: 2023, classLevel: &#39;CSA&#39;, role: &#39;Student&#39; }, Person { name: &#39;Tigran&#39;, ghID: &#39;Tigran7&#39;, classOf: 2023, classLevel: &#39;CSA&#39;, role: &#39;Student&#39; }, Person { name: &#39;Rebecca&#39;, ghID: &#39;Rebecca-123&#39;, classOf: 2023, classLevel: &#39;CSA&#39;, role: &#39;Student&#39; }, Person { name: &#39;Vidhi&#39;, ghID: &#39;unknown&#39;, classOf: 2024, classLevel: &#39;CSA&#39;, role: &#39;Student&#39; }, Person { name: &#39;Jiya&#39;, ghID: &#39;jiya-sav&#39;, classOf: 2023, classLevel: &#39;CSP&#39;, role: &#39;Student&#39; }, Person { name: &#39;Shreya&#39;, ghID: &#39;rey444&#39;, classOf: 2023, classLevel: &#39;CSP&#39;, role: &#39;Student&#39; }, Person { name: &#39;Noor&#39;, ghID: &#39;Nope1013&#39;, classOf: 2023, classLevel: &#39;CSP&#39;, role: &#39;Student&#39; }, Person { name: &#39;Sanika&#39;, ghID: &#39;sanikasha&#39;, classOf: 2023, classLevel: &#39;CSP&#39;, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:purple;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.7em 0.7em 0.7em pink;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // making a header body += &quot;&lt;p&gt;People in APCS&lt;/p&gt;&quot;; // Heading for Array Columns // tr is table row, th is table column // changing highlighter color by: style=&quot;color: white; background-color:green&quot; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark style=&#39;color: black; background-color:pink&#39;&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark style=&#39;color: black; background-color:pink&#39;&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark style=&#39;color: black; background-color:pink&#39;&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark style=&#39;color: black; background-color:pink&#39;&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark style=&#39;color: black; background-color:pink&#39;&gt;&quot; + &quot;Class Level&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classLevel + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . People in APCS . NameGitHub IDClass OfRoleClass Level . Mr M | jm1021 | 1977 | Teacher | master | Anthony | tonyhieu | 2022 | Student | CSA | Bria | B-G101 | 2023 | Student | CSA | Allie | xiaoa0 | 2023 | Student | CSA | Tigran | Tigran7 | 2023 | Student | CSA | Rebecca | Rebecca-123 | 2023 | Student | CSA | Vidhi | unknown | 2024 | Student | CSA | Jiya | jiya-sav | 2023 | Student | CSP | Shreya | rey444 | 2023 | Student | CSP | Noor | Nope1013 | 2023 | Student | CSP | Sanika | sanikasha | 2023 | Student | CSP | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . . .",
            "url": "https://jiya-sav.github.io/jiya_repository/techtalk/2022/09/05/TT130-js_week5.html",
            "relUrl": "/techtalk/2022/09/05/TT130-js_week5.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Changing Theme",
            "content": "I noticed that after I changed the theme, there were many formatting issues. Although the cat and red/ black colors were cool on the home page, my notebook posts were appearing strangely. For some reason, my md and docx files were fine, but the notebook ones and even the tags page were messed up. .",
            "url": "https://jiya-sav.github.io/jiya_repository/week%202/2022/09/05/ProblemsChangingTheme.html",
            "relUrl": "/week%202/2022/09/05/ProblemsChangingTheme.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string (John Doe is the output/ value and name is the key) # type(name) is an abreviation for string name = &quot;Jiya&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 17 print(&quot;age&quot;, age, type(age)) # variable of type float score = 95.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) # langs is an abreviation for language # 3 is the index in the list langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Jiya &lt;class &#39;str&#39;&gt; age 17 &lt;class &#39;int&#39;&gt; score 95.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; - langs[3] Bash &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Jiya&#39;, &#39;age&#39;: 17, &#39;score&#39;: 95.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Jiya &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;], &quot;Last_Snack&quot;: &quot;Fruity Thing&quot;, &quot;Fav_Drink&quot;: &quot;Coffee&quot; }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Jiya&quot;, &quot;LastName&quot;: &quot;Savlani&quot;, &quot;DOB&quot;: &quot;March 7&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;starjiyu@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Lambo&quot;], &quot;Last_Snack&quot;: &quot;Bar&quot;, &quot;Fav_Drink&quot; : &quot;Lemonade&quot; }) # Added Shreya :) InfoDb.append({ &quot;FirstName&quot;: &quot;Shreya&quot;, &quot;LastName&quot;: &quot;Sapkal&quot;, &quot;DOB&quot;: &quot;December 12&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;shreya.sapkal.959@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;2013-Ford Escape&quot;, &quot;2020-Chrysler Pacifica&quot;], &quot;Last_Snack&quot;: &quot;Chewy Thing&quot;, &quot;Fav_Drink&quot;: &quot;Water&quot; }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;], &#39;Last_Snack&#39;: &#39;Fruity Thing&#39;, &#39;Fav_Drink&#39;: &#39;Coffee&#39;}, {&#39;FirstName&#39;: &#39;Jiya&#39;, &#39;LastName&#39;: &#39;Savlani&#39;, &#39;DOB&#39;: &#39;March 7&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;starjiyu@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Lambo&#39;], &#39;Last_Snack&#39;: &#39;Bar&#39;, &#39;Fav_Drink&#39;: &#39;Lemonade&#39;}, {&#39;FirstName&#39;: &#39;Shreya&#39;, &#39;LastName&#39;: &#39;Sapkal&#39;, &#39;DOB&#39;: &#39;December 12&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;shreya.sapkal.959@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;2013-Ford Escape&#39;, &#39;2020-Chrysler Pacifica&#39;], &#39;Last_Snack&#39;: &#39;Chewy Thing&#39;, &#39;Fav_Drink&#39;: &#39;Water&#39;}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print(&quot; t&quot;, &quot;Last snack eaten was&quot;, d_rec[&quot;Last_Snack&quot;]) print(&quot; t&quot;, &quot;Favorite drink:&quot;, d_rec[&quot;Fav_Drink&quot;]) print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() # For loop to print InfoDB in reverse order print(&quot;For loop output in REVERSE ORDER for &quot; + str(len(InfoDb)) + &quot; items.&quot;) for record in reversed(InfoDb): print_data(record) . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Last snack eaten was Fruity Thing Favorite drink: Coffee Jiya Savlani Residence: San Diego Birth Day: March 7 Cars: Lambo Last snack eaten was Bar Favorite drink: Lemonade Shreya Sapkal Residence: San Diego Birth Day: December 12 Cars: 2013-Ford Escape, 2020-Chrysler Pacifica Last snack eaten was Chewy Thing Favorite drink: Water For loop output in REVERSE ORDER for 3 items. Shreya Sapkal Residence: San Diego Birth Day: December 12 Cars: 2013-Ford Escape, 2020-Chrysler Pacifica Last snack eaten was Chewy Thing Favorite drink: Water Jiya Savlani Residence: San Diego Birth Day: March 7 Cars: Lambo Last snack eaten was Bar Favorite drink: Lemonade John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Last snack eaten was Fruity Thing Favorite drink: Coffee . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Last snack eaten was Fruity Thing Favorite drink: Coffee Jiya Savlani Residence: San Diego Birth Day: March 7 Cars: Lambo Last snack eaten was Bar Favorite drink: Lemonade Shreya Sapkal Residence: San Diego Birth Day: December 12 Cars: 2013-Ford Escape, 2020-Chrysler Pacifica Last snack eaten was Chewy Thing Favorite drink: Water . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Last snack eaten was Fruity Thing Favorite drink: Coffee Jiya Savlani Residence: San Diego Birth Day: March 7 Cars: Lambo Last snack eaten was Bar Favorite drink: Lemonade Shreya Sapkal Residence: San Diego Birth Day: December 12 Cars: 2013-Ford Escape, 2020-Chrysler Pacifica Last snack eaten was Chewy Thing Favorite drink: Water . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://jiya-sav.github.io/jiya_repository/collegeboard/week%202/2022/08/29/TP120-python_lists.html",
            "relUrl": "/collegeboard/week%202/2022/08/29/TP120-python_lists.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Installation Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 bash: python2: command not found . . Conda Packages . conda list . # packages in environment at /Users/johnmortensen/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.2.0 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 interchange 2021.0.4 pypi_0 pypi intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython-cypher 0.2.6 pypi_0 pypi ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 monotonic 1.6 pypi_0 pypi mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 neo4jrestclient 2.1.1 pypi_0 pypi neo4jupyter 0.2.0 pypi_0 pypi nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 pansi 2020.7.3 pypi_0 pypi param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prettytable 3.3.0 pypi_0 pypi prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 py2neo 2021.2.3 pypi_0 pypi pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: java /Users/johnmortensen/Library/Jupyter/kernels/java javascript /Users/johnmortensen/Library/Jupyter/kernels/javascript python3 /Users/johnmortensen/opt/anaconda3/share/jupyter/kernels/python3 bash /usr/local/share/jupyter/kernels/bash . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /Users/johnmortensen/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://jiya-sav.github.io/jiya_repository/techtalk/bash_checks",
            "relUrl": "/techtalk/bash_checks",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Some Nice Flowers",
            "content": "Checkout some flowers! . Sunflowers . . Hydrangeas . .",
            "url": "https://jiya-sav.github.io/jiya_repository/fastpages/jupyter/week%201/2022/08/26/FlowerPost.html",
            "relUrl": "/fastpages/jupyter/week%201/2022/08/26/FlowerPost.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "First Hello Blog Post",
            "content": "msg = &quot;Hello Jiya&quot; print (msg) . Hello Jiya . Notes . I can take notes using a Jupyter kernel in a python kernel | .",
            "url": "https://jiya-sav.github.io/jiya_repository/fastpages/jupyter/week%200/2022/08/24/jiya_notebook.html",
            "relUrl": "/fastpages/jupyter/week%200/2022/08/24/jiya_notebook.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Jiya's first markdown",
            "content": "",
            "url": "https://jiya-sav.github.io/jiya_repository/markdown/week%200/2022/08/24/.html",
            "relUrl": "/markdown/week%200/2022/08/24/.html",
            "date": " • Aug 24, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "APCSP Notes",
          "content": "Important Commands to Know . Helpful Navigation Commands in Powershell . .",
          "url": "https://jiya-sav.github.io/jiya_repository/_pages/Notes.html",
          "relUrl": "/_pages/Notes.html",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Me xxx",
          "content": "My name is Jiya, and I am a senior at DNHS. Here are a few of my hobbies: . Reading | Going to the beach | Playing the piano | Spending time with family and friends | Looking at the sky (sunset pics from this summer featured below) | . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jiya-sav.github.io/jiya_repository/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Implementing API",
          "content": "This week, I chose to integrate an API about top 10 Netflix movies: . below is the code | below is the output of the code | .",
          "url": "https://jiya-sav.github.io/jiya_repository/_pages/implementingAPI.html",
          "relUrl": "/_pages/implementingAPI.html",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "JS Practice Demos",
          "content": "This Is My Demonstration of html and javascript . Link to my additions and experimentation with given js tutorial notebook: href=”https://www.markdownguide.org/cheat-sheet/” | href=”https://www.markdownguide.org/cheat-sheet/” | . This website is powered by fastpages [^1]. .",
          "url": "https://jiya-sav.github.io/jiya_repository/_pages/jspractice.html",
          "relUrl": "/_pages/jspractice.html",
          "date": ""
      }
      
  

  
      ,"page6": {
          "title": "My time box",
          "content": "Week Review Ticket and/or Blog Posts Learning Summary . 3 | Week 3 Review Ticket | / This week, I played around with App Lab. | . 2 | My fastpages | / During week 2, I made this time box, and customized my site more. I added link files to this page, and made sure there were plenty of images. Also, I made use of the tagging feature and learned about lists/ dictionaries in python. I made another quiz, and played around with the themes. | . 1 | Week 1 RT | / During week 1, I made a few example markdown and jupyter notebook posts to get an idea of how the blogging worked. I also created a quiz, learned how to make docx posts, and made a new page on my site to keep track of notes. | . 0 | My fastpages | / During week 0, I set up my repository and worked on exploring github/ fastpages. I joined the slack and also began learning how to set up posts. | .",
          "url": "https://jiya-sav.github.io/jiya_repository/mytimebox",
          "relUrl": "/mytimebox",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jiya-sav.github.io/jiya_repository/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}